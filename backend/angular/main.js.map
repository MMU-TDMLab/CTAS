{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/analytics/analyitics.service.ts","webpack:///./src/app/analytics/analytics.component.css","webpack:///./src/app/analytics/analytics.component.html","webpack:///./src/app/analytics/analytics.component.ts","webpack:///./src/app/angular-material.module.ts","webpack:///./src/app/annotation/annotation.component.css","webpack:///./src/app/annotation/annotation.component.html","webpack:///./src/app/annotation/annotation.component.ts","webpack:///./src/app/annotation/document.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth-interceptor.ts","webpack:///./src/app/auth/auth.guard.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/course/course.component.css","webpack:///./src/app/course/course.component.html","webpack:///./src/app/course/course.component.ts","webpack:///./src/app/course/module/module.component.css","webpack:///./src/app/course/module/module.component.html","webpack:///./src/app/course/module/module.component.ts","webpack:///./src/app/error-interceptor.ts","webpack:///./src/app/error/error.component.html","webpack:///./src/app/error/error.component.ts","webpack:///./src/app/error/error.service.ts","webpack:///./src/app/highlighter/jsFunctionManager.js","webpack:///./src/app/highlighter/txt2JSON.js","webpack:///./src/app/navbar/navbar.component.css","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/posts/create-post/create-post.component.css","webpack:///./src/app/posts/create-post/create-post.component.html","webpack:///./src/app/posts/create-post/create-post.component.ts","webpack:///./src/app/posts/posts.module.ts","webpack:///./src/app/posts/posts.service.ts","webpack:///./src/app/posts/show-post/show-post.component.css","webpack:///./src/app/posts/show-post/show-post.component.html","webpack:///./src/app/posts/show-post/show-post.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./auth/auth.module\": [\n\t\t\"./src/app/auth/auth.module.ts\",\n\t\t\"auth-auth-module\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { Analytics } from './analytics.model';\r\nimport { Clicks } from './clicks.model';\r\nimport { AnnotationClick } from './user-annotion.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\nconst BACKEND_URL_Analytics = environment.apiUrl + '/analytics';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AnalyticsService {\r\n  private analytics: Analytics[] = [];\r\n  private userAnalytics: Clicks[] = [];\r\n  private userAnnotion: AnnotationClick[] = [];\r\n  private analyticsUpdate = new Subject<Analytics[]>();\r\n  private userAnalyticsUpdate = new Subject<Clicks[]>();\r\n  private userAnnotationUpdate = new Subject<AnnotationClick[]>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAnalytics() {\r\n    this.http\r\n      .get<{ message: string; analytics: any }>(BACKEND_URL_Analytics)\r\n      .pipe(\r\n        map(data => {\r\n          return data.analytics.map(user => {\r\n            return {\r\n              userId: user.userId,\r\n              visitDate: user.visitDate,\r\n              visitDurationSeconds: user.visitDurationSeconds,\r\n              postId: user.postId\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(\r\n        result => {\r\n          this.analytics = result;\r\n          this.analyticsUpdate.next([...this.analytics]);\r\n        },\r\n        error => {\r\n          // console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  getClicks() {\r\n    this.http\r\n      .get<{ message: string; users: any }>(\r\n        BACKEND_URL_Analytics + '/user-clicks'\r\n      )\r\n      .pipe(\r\n        map(data => {\r\n          return data.users.map(user => {\r\n            return {\r\n              user\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(\r\n        result => {\r\n          this.userAnalytics = result;\r\n          this.userAnalyticsUpdate.next([...this.userAnalytics]);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  getAnnotationAnalytics() {\r\n    this.http\r\n      .get<{ message: string; words: any }>(BACKEND_URL_Analytics + '/user-annotation')\r\n      .pipe(\r\n        map(data => {\r\n          return data.words.map(user => {\r\n            return {\r\n              word: user.word,\r\n              userId: user.userId,\r\n              visitDate: user.visitDate,\r\n              postId: user.postId\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(\r\n        result => {\r\n          this.userAnnotion = result;\r\n          this.userAnnotationUpdate.next([...this.userAnnotion]);\r\n        },\r\n        error => {\r\n          // console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  getUserAnalyticsClicks() {\r\n    return this.userAnalyticsUpdate.asObservable();\r\n  }\r\n\r\n  getWordUpdateListenerTwo() {\r\n    return this.analyticsUpdate.asObservable();\r\n  }\r\n\r\n  getUserAnnotationClicks() {\r\n    return this.userAnnotationUpdate.asObservable();\r\n  }\r\n}\r\n","module.exports = \".centerTheButtons {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.bgColor {\\r\\n  background-color: #c3c3c3;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <br>\\r\\n  <div class=\\\"centerTheButtons\\\">\\r\\n    <button class=\\\"btn btn-secondary\\\" data-toggle=\\\"collapse\\\" href=\\\"#multiCollapseExample1\\\" role=\\\"button\\\" aria-expanded=\\\"false\\\"\\r\\n      aria-controls=\\\"multiCollapseExample1\\\">Clicks Analytics</button>\\r\\n    <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#multiCollapseExample2\\\"\\r\\n      aria-expanded=\\\"false\\\" aria-controls=\\\"multiCollapseExample2\\\">User Analytics</button>\\r\\n    <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#multiCollapseExample3\\\"\\r\\n      aria-expanded=\\\"false\\\" aria-controls=\\\"multiCollapseExample3\\\">Word Analytics</button>\\r\\n  </div>\\r\\n  <br>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <div class=\\\"collapse multi-collapse\\\" id=\\\"multiCollapseExample1\\\">\\r\\n        <div class=\\\"card card-body\\\">\\r\\n          <table class=\\\"table table-bordered table-inverse\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>User ID</th>\\r\\n                <th>Visits</th>\\r\\n                <th>Post Visited</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let res of result; let count=index\\\">\\r\\n                <th>{{ res.userId }}</th>\\r\\n                <th>{{ res.visitCount }}</th>\\r\\n                <th>{{ res.visitPostId }}</th>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col\\\">\\r\\n      <div class=\\\"collapse multi-collapse\\\" id=\\\"multiCollapseExample2\\\">\\r\\n        <div class=\\\"card card-body\\\">\\r\\n          <table class=\\\"table table-bordered table-inverse\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>User ID</th>\\r\\n                <th>Post Visited</th>\\r\\n                <th>Visit Date</th>\\r\\n                <th>Visit Duration In Seconds</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let analytic of analytics; let count=index\\\">\\r\\n                <!-- <ng-container *ngIf=\\\"analytic.visitDurationSeconds >= 5\\\"> -->\\r\\n                  <th>{{ analytic.userId }}</th>\\r\\n                  <th>{{ analytic.postId }}</th>\\r\\n                  <th>{{ analytic.visitDate }}</th>\\r\\n                  <th>{{ analytic.visitDurationSeconds }}</th>\\r\\n                <!-- </ng-container> -->\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col\\\">\\r\\n      <div class=\\\"collapse multi-collapse\\\" id=\\\"multiCollapseExample3\\\">\\r\\n        <div class=\\\"card card-body\\\">\\r\\n          <table class=\\\"table table-bordered table-inverse\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>Word Visited</th>\\r\\n                <th>User ID</th>\\r\\n                <th>Visit Date</th>\\r\\n                <th>Post Visited</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let userAnnotion of userAnnotions; let count=index\\\">\\r\\n                <th>{{ userAnnotion.word }}</th>\\r\\n                <th>{{ userAnnotion.userId }}</th>\\r\\n                <th>{{ userAnnotion.visitDate }}</th>\\r\\n                <th>{{ userAnnotion.postId }}</th>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <!-- <br>\\r\\n  <div class=\\\"accordion\\\" id=\\\"accordionExample\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-header\\\" id=\\\"headingOne\\\">\\r\\n        <h5 class=\\\"mb-0\\\">\\r\\n          <button class=\\\"btn btn-link\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\"\\r\\n            aria-controls=\\\"collapseOne\\\">\\r\\n            Clicks Analytics\\r\\n          </button>\\r\\n        </h5>\\r\\n      </div>\\r\\n      <div id=\\\"collapseOne\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingOne\\\" data-parent=\\\"#accordionExample\\\">\\r\\n        <div class=\\\"card-body\\\">\\r\\n          <table class=\\\"table table-bordered table-inverse\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>User ID</th>\\r\\n                <th>Visits</th>\\r\\n                <th>Post Visited</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let res of result; let count=index\\\">\\r\\n                <th>{{ res.userId }}</th>\\r\\n                <th>{{ res.visitCount }}</th>\\r\\n                <th>{{ res.visitPostId }}</th>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\" id=\\\"headingTwo\\\">\\r\\n          <h5 class=\\\"mb-0\\\">\\r\\n            <button class=\\\"btn btn-link collapsed\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapseTwo\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseTwo\\\">\\r\\n                User Analytics\\r\\n            </button>\\r\\n          </h5>\\r\\n        </div>\\r\\n        <div id=\\\"collapseTwo\\\" class=\\\"collapse\\\" aria-labelledby=\\\"headingTwo\\\" data-parent=\\\"#accordionExample\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n              <table class=\\\"table table-bordered table-inverse\\\">\\r\\n                  <thead>\\r\\n                    <tr>\\r\\n                      <th>User ID</th>\\r\\n                      <th>Post Visited</th>\\r\\n                      <th>Visit Date</th>\\r\\n                      <th>Visit Duration</th>\\r\\n                    </tr>\\r\\n                  </thead>\\r\\n                  <tbody>\\r\\n                    <tr *ngFor=\\\"let analytic of analytics; let count=index\\\">\\r\\n                      <th>{{ analytic.userId }}</th>\\r\\n                      <th>{{ analytic.postId }}</th>\\r\\n                      <th>{{ analytic.visitDate }}</th>\\r\\n                      <th>{{ analytic.visitDurationSeconds }}</th>\\r\\n                    </tr>\\r\\n                  </tbody>\\r\\n                </table>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n  </div>\\r\\n  <br> -->\\r\\n\\r\\n</div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Analytics } from './analytics.model';\r\nimport { Clicks } from './clicks.model';\r\nimport { AnnotationClick } from './user-annotion.model';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { AnalyticsService } from './analyitics.service';\r\n\r\n@Component({\r\n  selector: 'app-analytics',\r\n  templateUrl: './analytics.component.html',\r\n  styleUrls: ['./analytics.component.css']\r\n})\r\nexport class AnalyticsComponent implements OnInit, OnDestroy {\r\n  private authStatusSub: Subscription;\r\n  private analyticsSub: Subscription;\r\n  private userClicksSub: Subscription;\r\n  private userAnnotationSub: Subscription;\r\n  public analytics: Analytics[] = [];\r\n  public userClicks: Clicks[] = [];\r\n  public userAnnotions: AnnotationClick[] = [];\r\n  public userIsAuthenticated: boolean;\r\n  public isLoading: boolean;\r\n  public role: string;\r\n  public result = [];\r\n\r\n  constructor(\r\n    public authService: AuthService,\r\n    private analyticsService: AnalyticsService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isLoading = true;\r\n    this.userIsAuthenticated = false;\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatusSub = this.authService\r\n      .getAuthStatus()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.role = this.authService.getUserRole();\r\n        this.isLoading = false;\r\n      });\r\n\r\n    this.analyticsService.getAnalytics();\r\n    this.analyticsSub = this.analyticsService\r\n      .getWordUpdateListenerTwo()\r\n      .subscribe((analytics: Analytics[]) => {\r\n        this.analytics = analytics;\r\n      });\r\n\r\n    this.analyticsService.getClicks();\r\n    this.userClicksSub = this.analyticsService\r\n      .getUserAnalyticsClicks()\r\n      .subscribe((userClicks: Clicks[]) => {\r\n        this.userClicks = userClicks;\r\n        this.parseVisitData(this.userClicks);\r\n      });\r\n\r\n    this.analyticsService.getAnnotationAnalytics();\r\n    this.userAnnotationSub = this.analyticsService\r\n      .getUserAnnotationClicks()\r\n      .subscribe((userAnnotions: AnnotationClick[]) => {\r\n        this.userAnnotions = userAnnotions;\r\n      });\r\n  }\r\n\r\n  parseVisitData = allUsers => {\r\n    this.result = [];\r\n\r\n    allUsers.forEach(userData => {\r\n      // For some reason `userData` is an Object with a single \"user\" property.\r\n      const user = userData.user;\r\n      const userId = user._id;\r\n\r\n      user.visits.forEach(userVisit => {\r\n        const visitCount = userVisit.visitCount;\r\n        const visitPostId = userVisit.postId;\r\n\r\n        // Now we have all the data for a single row!\r\n        // We have references for \"userId\", \"visitCount\", and \"visitPostId\"\r\n        this.result.push({\r\n          userId: userId,\r\n          visitCount: visitCount,\r\n          visitPostId: visitPostId\r\n        });\r\n      });\r\n    });\r\n    return this.result;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n    this.analyticsSub.unsubscribe();\r\n    this.userClicksSub.unsubscribe();\r\n    this.userAnnotationSub.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MatInputModule, MatCardModule, MatButtonModule, MatToolbarModule, MatExpansionModule, MatProgressSpinnerModule,\r\n  MatPaginatorModule, MatDialogModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatToolbarModule,\r\n    MatExpansionModule,\r\n    MatPaginatorModule\r\n  ]\r\n})\r\n\r\nexport class AngularMaterialModule {}\r\n\r\n","module.exports = \".container {\\r\\n  padding-top: 2em;\\r\\n  padding-left: 3em;\\r\\n}\\r\\n\\r\\n#stronger {\\r\\n  padding-right: 5px;\\r\\n  font-family: \\\"Times New Roman\\\", Times, serif;\\r\\n  font-size: large;\\r\\n}\\r\\n\\r\\n.myStyle {\\r\\n  font-family: \\\"Times New Roman\\\", Times, serif;\\r\\n  line-height: 1.5;\\r\\n  font-size: 16px;\\r\\n  font-weight: 550;\\r\\n}\\r\\n\\r\\n#scrollable {\\r\\n  margin-top: 2em;\\r\\n  margin-bottom: 2em;\\r\\n  outline: 2px solid black;\\r\\n  outline-offset: 12px;\\r\\n  font-family: \\\"Times New Roman\\\", Times, serif;\\r\\n  line-height: 2.0;\\r\\n  font-size: 14px;\\r\\n  white-space: pre-wrap;\\r\\n}\\r\\n\\r\\n#reference{\\r\\n  white-space: pre-wrap;\\r\\n}\\r\\n\\r\\n#btnHighLight {\\r\\n  margin-top: 0.75em;\\r\\n  min-width: 11.25em;\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\n#btnShow {\\r\\n  margin-top: 3em;\\r\\n}\\r\\n\\r\\n#postbtn {\\r\\n  margin-top: 0.25em;\\r\\n}\\r\\n\\r\\n#postDocbtn {\\r\\n  margin-top: 1.0em;\\r\\n}\\r\\n\\r\\n#annotation {\\r\\n  margin-top: 0.5em;\\r\\n}\\r\\n\\r\\n.highlighted {\\r\\n  background-color: yellow;\\r\\n  display: inline;\\r\\n}\\r\\n\\r\\n.high {\\r\\n  background-color: yellow;\\r\\n  display: inline;\\r\\n}\\r\\n\\r\\n.margin-top {\\r\\n  margin-top: 0.75em;\\r\\n  min-width: 11.25em;\\r\\n}\\r\\n\\r\\n#editBtn {\\r\\n  margin-top: 0.5em;\\r\\n}\\r\\n\\r\\n#deleteBtn {\\r\\n  margin-top: 1.25em;\\r\\n}\\r\\n\\r\\n#editDocBtn {\\r\\n  margin-top: 0.5em;\\r\\n}\\r\\n\\r\\n#deleteDocBtn {\\r\\n  margin-top: 1.25em;\\r\\n}\\r\\n\\r\\n.container {\\r\\n  display: flex;\\r\\n  max-width: 1200px;\\r\\n}\\r\\n\\r\\n/**\\r\\n* The loading spinner which is set to the middle.\\r\\n*/\\r\\n\\r\\nmat-spinner {\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n.column.left {\\r\\n  flex: 0 0 230px;\\r\\n}\\r\\n\\r\\n.column.center {\\r\\n  flex: 0 0 450px;\\r\\n  max-width: 450px;\\r\\n}\\r\\n\\r\\n.column.right {\\r\\n  position: fixed;\\r\\n  left: 55em;\\r\\n  max-width: 200px;\\r\\n}\\r\\n\\r\\n#wordRef {\\r\\n  margin-top: 3em;\\r\\n}\\r\\n\\r\\n.margin-left {\\r\\n  margin-left: 0.5em;\\r\\n}\\r\\n\\r\\n#difficultWords {\\r\\n  min-width: 11.25em;\\r\\n  background-color: #5c85d6;\\r\\n  border-color: #5c85d6;\\r\\n}\\r\\n\\r\\n#editAnnotation {\\r\\n  background-color: #2eb8b8;\\r\\n  border-color: #2eb8b8;\\r\\n}\\r\\n\\r\\n.difScale {\\r\\n  margin-bottom: 1em;\\r\\n}\\r\\n\\r\\n.textCenter {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n  <ng-container *ngIf=\\\"!isLoading\\\">\\r\\n    <div class=\\\"column left\\\">\\r\\n      <!-- Empty here -->\\r\\n    </div>\\r\\n    <div class=\\\"column center\\\">\\r\\n      <!-- Get post by ID Request on backend -->\\r\\n      <div *ngFor=\\\"let post of posts;\\\">\\r\\n        <ng-template [ngIf]=\\\"post.id === id\\\">\\r\\n          <strong id=\\\"stronger\\\">{{ post.header }}</strong>\\r\\n          <hr>\\r\\n          <div>\\r\\n            {{ post.abstract }}\\r\\n          </div>\\r\\n          <div id=\\\"scrollable\\\">\\r\\n            {{ selectedPost }}\\r\\n          </div>\\r\\n          <div class=\\\"myStyle\\\">\\r\\n            References to the above paper and or extra reading material can be found below:\\r\\n          </div>\\r\\n          <br>\\r\\n          <div id=\\\"reference\\\">\\r\\n            {{ post.references }}\\r\\n          </div>\\r\\n          <br>\\r\\n        </ng-template>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"column right\\\">\\r\\n      <ng-template [ngIf]=\\\"userIsAuthenticated && this.role == 'teacher' || this.role == 'admin'\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"difficultWords\\\" class=\\\"btn btn-secondary btn-sm shadow mb-5 rounded\\\" data-toggle=\\\"modal\\\" data-target=\\\"#exampleModal\\\" data-backdrop=\\\"static\\\" data-keyboard=\\\"false\\\">\\r\\n          Difficult Words\\r\\n          <i class=\\\"fas fa-search\\\"></i>\\r\\n        </button>\\r\\n        <div>\\r\\n          <a class=\\\"btn btn-warning btn-sm shadow mb-5 rounded\\\" id=\\\"btnHighLight\\\" (click)=\\\"highlightSelection()\\\">\\r\\n            Selected Text\\r\\n            <i class=\\\"fas fa-highlighter\\\"></i>\\r\\n          </a>\\r\\n        </div>\\r\\n      </ng-template>\\r\\n      <ng-template [ngIf]='word'>\\r\\n        <form [formGroup]='form'>\\r\\n          <div class=\\\"alert alert-warning alert-dismissible fade show shadow rounded\\\" id=\\\"annotation\\\" role=\\\"alert\\\">\\r\\n            <strong>{{ word }}</strong>\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\" (click)='resetAlertBox(false)'>\\r\\n              <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n            </button>\\r\\n          </div>\\r\\n          <ng-template [ngIf]=\\\"userIsAuthenticated && (this.role == 'teacher' || this.role == 'admin')\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <ng-template [ngIf]=\\\"userIsAuthenticated && showingAnnotation && !editing\\\">\\r\\n                <div class=\\\"alert alert-info shadow rounded\\\" role=\\\"alert\\\">\\r\\n                  {{ showingAnnotation }}\\r\\n                </div>\\r\\n              </ng-template>\\r\\n              <ng-template [ngIf]=\\\"userIsAuthenticated && showingAnnotation && editing && !docTrue\\\">\\r\\n                <div class=\\\"alert alert-info\\\" role=\\\"alert\\\">\\r\\n                  <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\" placeholder=\\\"{{ showingAnnotation }}\\\" rows=\\\"3\\\" formControlName=\\\"annotation\\\"\\r\\n                    value=\\\"{{ showingAnnotation }}\\\"></textarea>\\r\\n                </div>\\r\\n                <button class=\\\"btn btn-success btn-sm\\\" id=\\\"saveDocEditBtn\\\" type=\\\"button\\\" (click)='onDocEditSub()' [disabled]=\\\"!form.valid\\\">Save Edited Annotation</button>\\r\\n              </ng-template>\\r\\n              <ng-template [ngIf]=\\\"userIsAuthenticated && !showingAnnotation\\\">\\r\\n                <textarea class=\\\"form-control\\\" id=\\\"exampleFormControlTextarea1\\\" placeholder=\\\"Describe Word\\\" rows=\\\"3\\\" formControlName=\\\"annotation\\\"></textarea>\\r\\n              </ng-template>\\r\\n            </div>\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"userIsAuthenticated && form.valid && !editing && (this.role == 'teacher' ||  this.role == 'admin')\\\">\\r\\n            <button class=\\\"btn btn-success btn-sm\\\" id=\\\"postDocbtn\\\" type=\\\"button\\\" (click)='addToDoc()' [disabled]=\\\"!form.valid\\\">Save To This Document</button>\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"userIsAuthenticated && !editing && showingAnnotation && !docTrue && (this.role == 'teacher' ||  this.role == 'admin')\\\">\\r\\n            <div>\\r\\n              <button class=\\\"btn btn-secondary btn-sm margin-top shadow rounded\\\" id=\\\"editAnnotation\\\" type=\\\"button\\\" (click)='onDocEditWord()'>Edit Annotation\\r\\n                <i class=\\\"fas fa-pencil-alt margin-left\\\"></i>\\r\\n              </button>\\r\\n            </div>\\r\\n            <button class=\\\"btn btn-danger btn-sm margin-top shadow rounded\\\" type=\\\"button\\\" (click)='onDocDelete()'>Delete Annotation\\r\\n              <i class=\\\"far fa-trash-alt margin-left\\\"></i>\\r\\n            </button>\\r\\n          </ng-template>\\r\\n        </form>\\r\\n        <ng-template [ngIf]=\\\"userIsAuthenticated && this.role == 'student'\\\">\\r\\n          <div class=\\\"alert alert-info\\\" role=\\\"alert\\\">\\r\\n            {{ showingAnnotation }}\\r\\n          </div>\\r\\n        </ng-template>\\r\\n      </ng-template>\\r\\n    </div>\\r\\n  </ng-container>\\r\\n</div>\\r\\n<div class=\\\"modal fade\\\" id=\\\"exampleModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Text Scanner</h5>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\" (click)=\\\"modalClosed()\\\">\\r\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n      </div>\\r\\n      <form [formGroup]='secondForm'>\\r\\n        <div class=\\\"modal-body textCenter\\\">\\r\\n          <h6 class=\\\"card-subtitle mb-2 text-muted textCenter\\\">Text Scanner Difficulty Scale</h6>\\r\\n          <div class=\\\"form-check form-check-inline\\\">\\r\\n            <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"difficulty\\\" id=\\\"inlineRadio1\\\" value=\\\"beginner\\\" formControlName=\\\"difficulty\\\">\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"inlineRadio1\\\">Beginner</label>\\r\\n          </div>\\r\\n          <div class=\\\"form-check form-check-inline\\\">\\r\\n            <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"difficulty\\\" id=\\\"inlineRadio2\\\" value=\\\"intermediate\\\" formControlName=\\\"difficulty\\\">\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"inlineRadio2\\\">Intermediate</label>\\r\\n          </div>\\r\\n          <div class=\\\"form-check form-check-inline difScale\\\">\\r\\n            <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"difficulty\\\" id=\\\"inlineRadio3\\\" value=\\\"advanced\\\" formControlName=\\\"difficulty\\\">\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"inlineRadio3\\\">Advanced</label>\\r\\n          </div>\\r\\n          <hr>\\r\\n          <ng-template [ngIf]=\\\"!secondForm.value.difficulty\\\">\\r\\n            Please pick one of these options!\\r\\n          </ng-template>\\r\\n          <ng-template [ngIf]=\\\"secondForm.value.difficulty\\\">\\r\\n            Checking for difficult words could take a few seconds, do you still want to proceed?\\r\\n          </ng-template>\\r\\n        </div>\\r\\n      </form>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"modalClosed()\\\">Close</button>\\r\\n        <ng-template [ngIf]=\\\"secondForm.value.difficulty\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"possibleWords()\\\" data-dismiss=\\\"modal\\\">Continue</button>\\r\\n        </ng-template>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, OnDestroy, AfterViewChecked } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { Post } from '../posts/post.model';\r\nimport { DocWord } from './document-word.model';\r\nimport { PostsService } from '../posts/posts.service';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { DocService } from './document.service';\r\nimport { highlightManager } from '../highlighter/txt2JSON';\r\nimport { highlightWords } from '../highlighter/jsFunctionManager';\r\n\r\n@Component({\r\n  selector: 'app-annotation',\r\n  templateUrl: './annotation.component.html',\r\n  styleUrls: ['./annotation.component.css']\r\n})\r\n\r\n/**\r\n * Annotation Component is the component which creates the annotations.\r\n * It currently creates the annotations automatically which have previously been stored in the database.\r\n * This component also allows Teachers/Admins to create annotations on the fly with the highlight method.\r\n * Delete and edit annotations.\r\n */\r\n\r\nexport class AnnotationComponent\r\n  implements OnInit, OnDestroy, AfterViewChecked {\r\n  public docManager;\r\n  public DifficultWords;\r\n  public form: FormGroup;\r\n  public secondForm: FormGroup;\r\n  public posts: Post[] = [];\r\n  public docWord: DocWord[] = [];\r\n  public isLoading = true;\r\n  public thewords: string[];\r\n  public role: string;\r\n  public id: string;\r\n  public selectedPost: string;\r\n  public annotation: string;\r\n  public editAnnotation: string;\r\n  public word;\r\n  public showingAnnotation: string;\r\n  public docWords = [];\r\n  public theHardWords = [];\r\n  public wordWithAnnotation = [];\r\n  public userIsAuthenticated = false;\r\n  public editing: boolean;\r\n  public docTrue: boolean;\r\n  public wordId;\r\n  public referencedText;\r\n  public theWordId: string;\r\n  private fileText;\r\n  private startTime;\r\n  private endTime;\r\n  private date;\r\n  private modifiedTime;\r\n  private postsSub: Subscription;\r\n  private authStatus: Subscription;\r\n  private docSub: Subscription;\r\n  private readTextSub: Subscription;\r\n\r\n  constructor(\r\n    public postsService: PostsService,\r\n    private authService: AuthService,\r\n    public route: ActivatedRoute,\r\n    private docService: DocService\r\n  ) {}\r\n\r\n  /**\r\n   * This function runs at the start when you load this component.\r\n   * Contains the form validation.\r\n   * This function gets the complex words, posts and document specific words from the database and passes them to the component.\r\n   * This function also checks if the user is authenticated and check what role the user is in order to allow a user to create a\r\n   * post or view a post.\r\n   * When everything has gone through the loading spinner gets set to false.\r\n   */\r\n  ngOnInit() {\r\n    this.startTime = Date.now();\r\n    this.id = this.route.snapshot.paramMap.get('postId');\r\n    this.editing = false;\r\n    this.annotation = '';\r\n    this.editAnnotation = '';\r\n    this.form = this.createForm();\r\n    this.secondForm = this.createSecondForm();\r\n\r\n    this.postsService.getPosts();\r\n    this.postsSub = this.postsService\r\n      .getPostUpdateListenerTwo()\r\n      .subscribe((posts: Post[]) => {\r\n        this.posts = posts;\r\n        this.posts.map(post => {\r\n          if (post.id === this.id) {\r\n            this.selectedPost = post.body;\r\n          }\r\n        });\r\n      });\r\n\r\n    this.docService.getWords();  //Gets previously annotated complex words\r\n    this.docSub = this.docService\r\n      .getWordUpdateListenerTwo()\r\n      .subscribe((docWord: DocWord[]) => {\r\n        this.docWords = docWord;\r\n        this.docWords.map(doc => {\r\n          if (doc.document_id === this.id) {\r\n            this.docWords.push(doc.word);\r\n          }\r\n        });\r\n      });\r\n\r\n    this.role = this.authService.getUserRole();\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatus = this.authService\r\n      .getAuthStatus()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.role = this.authService.getUserRole();\r\n      });\r\n    this.isLoading = false;\r\n  }\r\n\r\n  /**\r\n   * Validation for the form when creating the annotations using FormGroup/FormControl.\r\n   */\r\n  createForm(): FormGroup {\r\n    return new FormGroup({\r\n      annotation: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n          Validators.maxLength(450)\r\n        ]\r\n      })\r\n    });\r\n  }\r\n\r\n  createSecondForm(): FormGroup {\r\n    return new FormGroup({\r\n      difficulty: new FormControl(null, {\r\n        validators: [\r\n          Validators.required\r\n        ]\r\n      })\r\n    });\r\n  }\r\n  \r\n  reInit(){ //refetches annotated words, resets the highlights, highlights annotation then highlights complex words if they've been previously fetched\r\n    this.docService.getWords();  \r\n    this.docSub = this.docService\r\n      .getWordUpdateListenerTwo()\r\n      .subscribe((docWord: DocWord[]) => {\r\n        this.docWords = docWord;\r\n        this.docWords.map(doc => {\r\n          if (doc.document_id === this.id) {\r\n            this.docWords.push(doc.word);\r\n          }\r\n        });\r\n\t\tthis.docManager.reset()\r\n\t\tthis.highlightDocumentSpecificWords(this.docWords); \r\n\t\tif(this.DifficultWords)this.DifficultWords.apply()\r\n      });\r\n  }\r\n\r\n  /**\r\n   * documentSpecificWords method gets the (Per document words) from the database, passing them through this method which gets\r\n   * the #id of the element of the HTML which shows the post. The same pretty much as the Highlight method. Runs the text from\r\n   * that element through a map where if any (document word) match any word from the post or better said the text inside the\r\n   * (#scrollable) div. It will then wrap it in an <a> tag and give it different styles and click listner.\r\n   */\r\n  highlightDocumentSpecificWords(words: string[]) {\r\n    try {\r\n      const high = document.getElementById('scrollable');\r\n      if(!this.docManager)this.docManager = new highlightManager(high); //add in post //also or check if element is the same as high....\r\n\t  new highlightWords(this.docManager, words).apply('clickable');\r\n\r\n      const elementsToMakeClickable = document.getElementsByClassName(\r\n        'clickable'\r\n      );\r\n      const elementsToMakeClickableArray = Array.from(elementsToMakeClickable);\r\n      elementsToMakeClickableArray.map(element => {\r\n        element.addEventListener('click', this.viewAnnotation.bind(this));\r\n      });\r\n      document.getElementById('btnHighLight').style.visibility = 'visible';\r\n    } catch (e) {} \r\n  }\r\n\r\n  /**\r\n   * ViewAnnotation Method gets called when you click on an annotation (yellow highlighted word in the text). When it has been\r\n   * clicked it pushes that word through to here, either from the highlight/documentSpecificWords method and calls findAnnotation.\r\n   * @param e Contains the word of which you have clicked on.\r\n   */\r\n  viewAnnotation(e) {\r\n    this.resetAlertBox(false);\r\n    const word = e.target.textContent;\r\n    if (this.role === 'student') {\r\n      const currentDate = new Date();\r\n      this.date = currentDate;\r\n      this.docService.annotationClick(word, this.date, this.id);\r\n    }\r\n    this.findAnnotation(word);\r\n  }\r\n\r\n  /**\r\n   * findAnnotation sets the setWord to e, the word to e, then maps the complex words and document specific words to find out which\r\n   * word matches and then stores the annotation of the current word that has been clicked to the showingAnnotation. This also will\r\n   * let the user know if the word is a 'Global Word' or if the word is a 'Document Specific Word'.\r\n   * @param e - e is the word that the user has clicked.\r\n   */\r\n  findAnnotation(e) {\r\n    // this.setWord = e;\r\n    this.word = e.toLowerCase();\r\n    this.docService.getWords();\r\n\r\n    this.docWords.map(word => {\r\n      if (word.word === this.word && word.document_id === this.id) {\r\n        this.docTrue = false;\r\n        this.wordId = word.document_id;\r\n        this.showingAnnotation = word.annotation;\r\n        this.theWordId = word._id;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * highlightSelection sets the showingAnnotation to '', followed by getting the window.getSelection which is the selection\r\n   * of which the user has highlighted. If the user has not highlighted anything but triggered this in any way it will then\r\n   * return. Else it will get the range count from the text begining of text being 0 end of text being possibibly 5000. It then\r\n   * get the range of which the user has highlighted. Then follows by calling the highlightRange and passing the range over.\r\n   */\r\n  highlightSelection() {\r\n    this.showingAnnotation = '';\r\n    const userSelection = window.getSelection();\r\n    if (userSelection.toString() === null) {\r\n      return;\r\n    } else {\r\n      for (let i = 0; i < userSelection.rangeCount; i++) {\r\n        this.highlightRange(userSelection.getRangeAt(i));\r\n        this.word = userSelection.toString();\r\n        let theWord: string;\r\n        let theAnnotation: string;\r\n\r\n        this.docWords.map(word => {\r\n          if (word.word === this.word) {\r\n            theWord = this.word;\r\n            theAnnotation = word.annotation;\r\n          }\r\n        });\r\n        if (theWord && theAnnotation) {\r\n          if (\r\n            confirm(\r\n              theWord +\r\n                ' has previously been annotated as ' +\r\n                theAnnotation +\r\n                ' would you like to use this annotation?'\r\n            )\r\n          ) {\r\n            this.docService.addWord(theWord, theAnnotation, this.id);\r\n            this.word = '';\r\n            setTimeout(() => {\r\n              this.ngOnInit();\r\n            }, 400);\r\n          } else {\r\n            alert('You can create you\\'re own annotation for this word.');\r\n          }\r\n        }\r\n\r\n        const node = this.highlightRange(\r\n          userSelection.getRangeAt(i) /*.toString()*/\r\n        );\r\n        // Make the range into a variable so we can replace it\r\n        const range = userSelection.getRangeAt(i);\r\n        // Delete the current selection\r\n        range.deleteContents();\r\n        // Insert the copy\r\n        range.insertNode(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * guidGenerator generates a random ID for the node ID. Currently not very useful unless you want to\r\n   * modify specific nodes.\r\n   */\r\n  guidGenerator() {\r\n    const S4 = () => {\r\n      // tslint:disable-next-line:no-bitwise\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return (\r\n      S4() +\r\n      S4() +\r\n      '-' +\r\n      S4() +\r\n      '-' +\r\n      S4() +\r\n      '-' +\r\n      S4() +\r\n      '-' +\r\n      S4() +\r\n      S4() +\r\n      S4()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Using the range passed on from highlightSelection method, it then puts that text into an <a> tag followed by\r\n   * giving it a unique ID, with a class named 'clickable' and sets style to the text.\r\n   * @param range Range is the range between the highlighted word from x to y. An example would be this is the text:\r\n   * Today I went to the market. If you highlighted 'went' it would be 9 to 12 would be the range.\r\n   */\r\n  highlightRange(range) {\r\n    const newNode = document.createElement('a');\r\n    newNode.id = this.guidGenerator();\r\n    newNode.className = 'clickable';\r\n    newNode.setAttribute(\r\n      'style',\r\n      'background-color: yellow; display: inline; text-decoration: underline;'\r\n    );\r\n\r\n    // Add Text for replacement (for multiple nodes only)\r\n    newNode.appendChild(range.cloneContents());\r\n    // Apply Node around selection (used for individual nodes only)\r\n    return newNode;\r\n  }\r\n\r\n  /**\r\n   * addToDoc will be the method which stores the document specific words. It will check if the form is valid and if not\r\n   * then it will return. If the form is valid it will then ask the user if they are sure they want to save the word\r\n   * that they have highlighted to *This Document Only*. The annotation recieves the value from the form.value.annotation.\r\n   * It then passes the value from the front end and calls the service 'addWord' passing the word that needs to be stored,\r\n   * the annotation associated with it and the post ID. Then following by reseting the form. Else it will alert the user\r\n   * that the selected word has not been saved.\r\n   */\r\n  addToDoc() {\r\n    if (!this.form.valid) {\r\n      return;\r\n    }\r\n    if (\r\n      confirm(\r\n        'Are you sure you want to save ' + this.word + ' to this document?'\r\n      )\r\n    ) {\r\n      this.annotation = this.form.value.annotation;\r\n      this.word = this.word.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\-_—–`'‘’~()\\n\\t]/g, '');\r\n      this.word = this.word.trim().toLowerCase(); //removes whitespace surrounding word and sets word to lower case\r\n   \r\n      this.docService.addWord(this.word, this.annotation, this.id);\r\n      this.form.reset();\r\n      this.word = '';\r\n\t  \r\n\t  \r\n      setTimeout(() => {\r\n        this.reInit();\r\n      }, 400);\r\n\t  \r\n    } else {\r\n      alert(this.word + ' has not been saved.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * onDocEditWord method gets called when the edit button has been clicked, this then sets editing to true, hides the edit\r\n   * button & delete button. Editing boolean hides button on the HTML page.\r\n   */\r\n  onDocEditWord() {\r\n    this.editing = true;\r\n    try {\r\n      document.getElementById('#editDocBtn').style.visibility = 'hidden';\r\n      document.getElementById('#deleteDocBtn').style.visibility = 'hidden';\r\n    } catch (e) {}\r\n  }\r\n\r\n  /**\r\n   * onDocEditSub handles the submission of an edit made to a Document Specific Word. It will first ask for confimation,\r\n   * it will display a message asking if the user is sure that they want to edit this word on this document. Editing then\r\n   * become false followed by grabbing the word, the form value of annotation and the word ID then passing it through to the\r\n   * Doc Service. Then the reset will happen in order to refresh the changes on the page. If the user does not confirm the\r\n   * change then it will return an alert saying the word has not been edited.\r\n   */\r\n  onDocEditSub() {\r\n    if (\r\n      confirm(\r\n        'Are you sure you want to edit ' + this.word + ' on this document?'\r\n      )\r\n    ) {\r\n      this.editing = false;\r\n      let theAnnotation: string;\r\n      let wordID: string;\r\n      theAnnotation = this.form.value.annotation;\r\n      wordID = this.theWordId;\r\n      this.docService.editWord(wordID, theAnnotation);\r\n      this.resetAlertBox(true);\r\n    } else {\r\n      alert(this.word + ' has not been edited.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ResetAlertBox method is used when you click close on an annotation. It resets everything so the user can\r\n   * experience a new fresh start on any other word or in order to view different words that the user clicks.\r\n   * @param callNgOnInit If this is true then it will run the ngOnInit function, this has been made in such a way\r\n   * because this resetAlertBox method gets run regularly but we do not want to call ngOnInit everytime.\r\n   */\r\n  resetAlertBox(callNgOnInit: boolean) {\r\n    this.word = '';\r\n    this.annotation = '';\r\n    this.form.reset();\r\n    this.editing = false;\r\n    if (callNgOnInit) {\r\n      this.reInit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * onDocDelete method handles the deletion of the Document specific words. It will ask for confimation before deleting\r\n   * the selected word if so then it will run the following function. This will call the Doc Service and it will pass the\r\n   * selected word that you want to delete. find all the words and make a refresh and set everything back to ''. If the\r\n   * user decides to cancel when the confimation is promted then no effect will be made to the page/word.\r\n   */\r\n  onDocDelete() {\r\n    if (\r\n      confirm(\r\n        'Are you sure you want to DELETE ' +\r\n          this.word +\r\n          ' off this specific document?'\r\n      )\r\n    ) {\r\n      let wordID: string;\r\n      wordID = this.theWordId;\r\n      this.docService.deleteWord(wordID);\r\n      // const index = this.docWords.indexOf(deleteWord);\r\n      // this.docWords.splice(index);\r\n      this.word = '';\r\n      setTimeout(() => {\r\n        this.reInit(); \r\n      }, 400);\r\n    } else {\r\n      alert(this.word + ' has not been deleted.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * After View is checked, run the highlight method passing the (complex words from the database through).\r\n   * Run the documentSpecificWords method passing the document specific words.\r\n   * Run the urlify method which gets hold of all the references in the post and checks which ones are a link.\r\n   */\r\n  ngAfterViewChecked() {\r\n    // console.clear();\r\n\tthis.highlightDocumentSpecificWords(this.docWords);\r\n  }\r\n\r\n  possibleWords() {\r\n    this.readTextSub = this.docService.readText(this.id).subscribe(data => {\r\n      this.fileText = data;\r\n      this.highlightPossibleWords(this.fileText, this.secondForm.value.difficulty);\r\n    });\r\n  }\r\n \r\n  highlightPossibleWords(words: string[], diff: string) { //don't want to refresh everytime neccecerily\r\n    try {\r\n      if (this.role === 'student') {\r\n        return;\r\n      } else {\r\n        const high = document.getElementById('scrollable');\r\n        if(!this.docManager)this.docManager = new highlightManager(high);\r\n        else this.docManager.reset();\r\n    \r\n        switch(diff){\r\n          case 'beginner':\r\n            var difficultWords = words[0];\r\n            break;\r\n          case 'intermediate':\r\n            var difficultWords = words[1];\r\n            break;\r\n          case 'advanced':\r\n            var difficultWords = words[2];\r\n            break;\r\n          default:\r\n            throw new Error(\"Difficulty level not received\");\r\n        }\r\n\t\tthis.DifficultWords = new highlightWords(this.docManager, difficultWords)\r\n        this.DifficultWords.apply();\r\n        \r\n        const elementsToMakeClickable = document.getElementsByClassName(\r\n          'clickable'\r\n        );\r\n        const elementsToMakeClickableArray = Array.from(\r\n          elementsToMakeClickable\r\n        );\r\n        elementsToMakeClickableArray.map(element => {\r\n          element.addEventListener('click', this.viewAnnotation.bind(this));\r\n        });\r\n        document.getElementById('btnHighLight').style.visibility = 'visible';\r\n      }\r\n    } catch (e){console.error(e);}\r\n  }\r\n // DETECTING COMPLEX WORDS\r\n /*\r\n  highlightPossibleWords(words: string[], diff: string) {\r\n    try {\r\n      if (this.role === 'student') {\r\n        return;\r\n      } else {\r\n        const high = document.getElementById('scrollable');\r\n        //const paragraph = high.innerHTML.split(' '); //new lines aren't spaces\r\n        const paragraph = this.documentSplitter(high.innerHTML) //works better doesn't damage format\r\n        const res = [];\r\n        paragraph.map(word => {\r\n          let wordsInParagraph = word;\r\n          // const withoutPunct = wordsInParagraph.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\_—`'‘’~()]/g, '');\r\n          //const withoutPunct = wordsInParagraph.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\-_—–`'‘’~()\\n\\t]/g, '').toLowerCase();\r\n          const withoutPunct = wordsInParagraph.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\_`'‘’~()\\n\\t]/g, '').toLowerCase(); //keep conjuntions atm (—–) //generalize the function for this to avoid multiple uses of different regex, could get confusing!\r\n          if (diff === 'beginner') {\r\n            if (words[0].indexOf(withoutPunct) > -1) {\r\n              wordsInParagraph =\r\n                '<a class=\"optional\" style=\"background-color:#dcdfe5; text-decoration: underline;\">' +\r\n                word +\r\n                '</a>';\r\n            }\r\n          } else if (diff === 'intermediate') {\r\n            if (words[1].indexOf(withoutPunct) > -1) {\r\n              wordsInParagraph =\r\n                '<a class=\"optional\" style=\"background-color:#dcdfe5; text-decoration: underline;\">' +\r\n                word +\r\n                '</a>';\r\n            }\r\n          } else if (diff === 'advanced') {\r\n            if (words[2].indexOf(withoutPunct) > -1) {\r\n              wordsInParagraph =\r\n                '<a class=\"optional\" style=\"background-color:#dcdfe5; text-decoration: underline;\">' +\r\n                word +\r\n                '</a>';\r\n            }\r\n          }\r\n          res.push(wordsInParagraph);\r\n        });\r\n        high.innerHTML = res.join(' ');\r\n        const elementsToMakeClickable = document.getElementsByClassName(\r\n          'clickable'\r\n        );\r\n        const elementsToMakeClickableArray = Array.from(\r\n          elementsToMakeClickable\r\n        );\r\n        elementsToMakeClickableArray.map(element => {\r\n          element.addEventListener('click', this.viewAnnotation.bind(this));\r\n        });\r\n        document.getElementById('btnHighLight').style.visibility = 'visible';\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n    highlightDocumentSpecificWords(words: string[]) {\r\n    try {\r\n      const high = document.getElementById('scrollable');\r\n      //const paragraph = high.innerHTML.split(' '); //new lines aren't spaces this causes issues\r\n      const paragraph = this.documentSplitter(high.innerHTML); // has to be done in both places to maintain formatting\r\n      const res = [];\r\n      paragraph.map(word => { //changes made to the paragh effect future changes this needs to be redone, will have to think carefully\r\n        let t = word;\r\n        const withoutPunct = t.replace(/[.,\\/#!$%?\\^&\\*;:{}=\\-_—–`'‘’~()\\n\\t]/g, '').toLowerCase();\r\n        // const withoutPunct = t.replace(/[.,\\/#!$%\\^&\\*;:{}=\\_`'~()]/g, '');\r\n        // const wordWithoutPunch = word.replace(/[.,\\/#!$%\\^&\\*;:{}=\\_~()]/g, '');\r\n        if (words.indexOf(withoutPunct) > -1) {\r\n          t =\r\n            '<a class=\"clickable\" style=\"background-color: yellow; text-decoration: underline;\">' +\r\n            word +\r\n            '</a>';\r\n        }\r\n        res.push(t);\r\n      });\r\n      high.innerHTML = res.join(' ');\r\n      const elementsToMakeClickable = document.getElementsByClassName(\r\n        'clickable'\r\n      );\r\n      const elementsToMakeClickableArray = Array.from(elementsToMakeClickable);\r\n      elementsToMakeClickableArray.map(element => {\r\n        element.addEventListener('click', this.viewAnnotation.bind(this));\r\n      });\r\n      document.getElementById('btnHighLight').style.visibility = 'visible';\r\n    } catch (e) {} //better solution than try catch here surely\r\n  }\r\n  */\r\n\r\n  modalClosed() {\r\n    this.secondForm.reset();\r\n  }\r\n\r\n  /**\r\n   * When the user closes the page or navigates away from the page, all the subscriptions get unsubscribed so we do not have issues\r\n   * or any unnessasary waste of memory.\r\n   */\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n    this.authStatus.unsubscribe();\r\n    this.docSub.unsubscribe();\r\n    if (this.fileText) {\r\n      this.readTextSub.unsubscribe();\r\n    }\r\n    if (this.role === 'student') {\r\n      const currentDate = new Date();\r\n      this.date = currentDate;\r\n      this.endTime = Date.now();\r\n      const totalTime = this.endTime - this.startTime;\r\n      let seconds;\r\n      seconds = Math.floor(totalTime / 1000);\r\n      seconds = seconds % 60;\r\n      this.modifiedTime = seconds;\r\n      if (seconds >= 5) {\r\n        this.docService.userActiveDate(this.date, this.modifiedTime, this.id);\r\n        return {\r\n          seconds: seconds\r\n      };\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { DocWord } from './document-word.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\nconst BACKEND_URL_Document = environment.apiUrl + '/documentWords/';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\n/**\r\n * Doc Service retreives all *Document Specific* Words/Annotation/ID from the database. There is the Get,\r\n * Put, Delete and Post queries.\r\n */\r\nexport class DocService {\r\n  private docWords: DocWord[] = [];\r\n  private docWordUpdate = new Subject<DocWord[]>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  readText(id: string) {\r\n    return this.http.get(BACKEND_URL_Document + id);\r\n  }\r\n\r\n  /**\r\n   * This is the Get query. It requests the backend for the words and annotations and document ID.\r\n   */\r\n  getWords() {\r\n    this.http\r\n      .get<{ message: string; words: any }>(BACKEND_URL_Document)\r\n      .pipe(\r\n        map(wordData => {\r\n          return wordData.words.map(word => {\r\n            return {\r\n              _id: word._id,\r\n              word: word.word,\r\n              annotation: word.annotation,\r\n              document_id: word.document_id\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(result => {\r\n        this.docWords = result;\r\n        this.docWordUpdate.next([...this.docWords]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This is a normal get word as observable.\r\n   */\r\n  getWordUpdateListenerTwo() {\r\n    return this.docWordUpdate.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This gets the words as an observable with a type <any>.\r\n   */\r\n  getWordUpdateListener(): Observable<any> {\r\n    return this.http.get<any>(BACKEND_URL_Document);\r\n  }\r\n\r\n  /**\r\n   * This is the Post query, will create a Doc Word to a specific document.\r\n   * @param word The word that you are adding to the database.\r\n   * @param annotation The annotation accociated with the word.\r\n   * @param document_id The document the word/annotation is getting saved too.\r\n   */\r\n  addWord(word: string, annotation: string, document_id: string) {\r\n    const docWord: DocWord = {\r\n      word: word,\r\n      annotation: annotation,\r\n      document_id: document_id\r\n    };\r\n    // console.log(docWord);\r\n    return this.http\r\n      .post(BACKEND_URL_Document + '/new-word', docWord)\r\n      .subscribe(\r\n        response => {\r\n          // console.log(response);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * This is the Put query, this will update the annotation on the given word.\r\n   * @param wordID The word ID you would like to make changes on.\r\n   * @param theAnnotation The annotation that you are changing so the updated annotation.\r\n   */\r\n  editWord(wordID: string, theAnnotation: string) {\r\n    const anno = {\r\n      annotation: theAnnotation\r\n    };\r\n    this.http\r\n      .put(BACKEND_URL_Document + '/update' + wordID, anno)\r\n      .subscribe(response => {\r\n        // const updatedWords = [...this.docWords];\r\n        // const oldWordIndex = updatedWords.findIndex(w => w.word === theWord);\r\n        // const makeDocWord: DocWord = {\r\n        //   word: theWord,\r\n        //   annotation: theAnnotation,\r\n        //   document_id: document_id\r\n        // };\r\n        // updatedWords[oldWordIndex] = makeDocWord;\r\n        // this.docWords = updatedWords;\r\n        // this.docWordUpdate.next([...this.docWords]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This is the Delete query. It would pass the word ID you would like to remove.\r\n   * @param wordID The word ID you would like to remove will get passed through here.\r\n   */\r\n  deleteWord(wordID: string) {\r\n    this.http\r\n      .delete(BACKEND_URL_Document + '/delete-word' + wordID)\r\n      .subscribe(() => {\r\n        // const result = this.docWords.filter(\r\n        //   theword => theword.word !== word\r\n        // );\r\n        // this.docWords = result;\r\n        // this.docWordUpdate.next([...this.docWords]);\r\n      });\r\n  }\r\n\r\n  userActiveDate(date: string, time: string, postId: string) {\r\n    const dates = {\r\n      date: date,\r\n      time: time,\r\n      postId: postId\r\n    };\r\n    return this.http\r\n      .post(BACKEND_URL_Document + 'page-activity', dates)\r\n      .subscribe(\r\n        response => {\r\n          // console.log(response);\r\n        },\r\n        error => {\r\n          // console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  annotationClick(word: string, date: string, postId: string) {\r\n    const information = {\r\n      word: word,\r\n      date: date,\r\n      postId: postId\r\n    };\r\n    return this.http\r\n    .post(BACKEND_URL_Document + 'annotation-activity', information)\r\n    .subscribe(\r\n      response => {\r\n        // console.log(response);\r\n      },\r\n      error => {\r\n        // console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CourseComponent } from './course/course.component';\r\nimport { ModuleComponent } from './course/module/module.component';\r\nimport { AuthGuard } from './auth/auth.guard';\r\nimport { AnnotationComponent } from './annotation/annotation.component';\r\nimport { AnalyticsComponent } from './analytics/analytics.component';\r\n\r\n/**\r\n * This takes care of the routes. The 'canActivate: [AuthGuard]' checks if the\r\n * user is authenticated before accessing that route.\r\n */\r\nconst appRoutes: Routes = [\r\n  { path: '', redirectTo: '/course', pathMatch: 'full' },\r\n  { path: 'course', component: CourseComponent, canActivate: [AuthGuard] },\r\n  { path: 'analytics', component: AnalyticsComponent, canActivate: [AuthGuard] },\r\n  { path: 'module/:text', component: ModuleComponent, canActivate: [AuthGuard] },\r\n  { path: 'module/:text/edit/:postId', component: ModuleComponent, canActivate: [AuthGuard] },\r\n  { path: 'annotation', component: AnnotationComponent, canActivate: [AuthGuard] },\r\n  { path: 'annotation/:postId', component: AnnotationComponent, canActivate: [AuthGuard] },\r\n  { path: 'auth', loadChildren: './auth/auth.module#AuthModule'}\r\n  // { path: 'module', component: ModuleComponent, canActivate: [AuthGuard]  },\r\n  // { path: 'edit/:postId', component: ModuleComponent, canActivate: [AuthGuard] },›\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(appRoutes)],\r\n  exports: [RouterModule],\r\n  providers: [AuthGuard]\r\n})\r\n\r\nexport class AppRoutingModule {}\r\n","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\r\\n<main>\\r\\n  <router-outlet></router-outlet>\\r\\n</main>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { AuthService } from './auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.authUser();\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { CourseComponent } from './course/course.component';\r\nimport { ModuleComponent } from './course/module/module.component';\r\nimport { AuthInterceptor } from './auth/auth-interceptor';\r\nimport { AnnotationComponent } from './annotation/annotation.component';\r\nimport { ErrorInterceptor } from './error-interceptor';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { AngularMaterialModule } from './angular-material.module';\r\nimport { PostsModule } from './posts/posts.module';\r\nimport { AnalyticsComponent } from './analytics/analytics.component';\r\nimport { PostsService } from './posts/posts.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { DocService } from './annotation/document.service';\r\nimport { AnalyticsService } from './analytics/analyitics.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavbarComponent,\r\n    CourseComponent,\r\n    ModuleComponent,\r\n    AnnotationComponent,\r\n    ErrorComponent,\r\n    AnalyticsComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    AngularMaterialModule,\r\n    ReactiveFormsModule,\r\n    PostsModule,\r\n  ],\r\n  providers: [\r\n    PostsService, AuthService, DocService, AnalyticsService,\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true }\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [ErrorComponent]\r\n})\r\nexport class AppModule {}\r\n","import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const authToken = this.authService.getToken();\r\n    const authRequest = req.clone({\r\n      headers: req.headers.set('Authorization', 'Bearer ' + authToken)\r\n    });\r\n    return next.handle(authRequest);\r\n  }\r\n}\r\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\n/**\r\n * This will guard users from accessing certain pages without authentication. If not authenticated then\r\n * you get redirected to the '/auth/login'.\r\n */\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Observable<boolean> | Promise<boolean> {\r\n    const isAuth = this.authService.getIsAuth(); // Checks if user is authenticated\r\n    if (!isAuth) {\r\n      this.router.navigate(['/auth/login']); // if not authenticated then user gets navigated to login page\r\n    }\r\n    return isAuth;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { AuthData } from './auth-data.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\nconst BACKEND_URL = environment.apiUrl + '/user/';\r\n\r\n@Injectable({ providedIn: 'root'})\r\n\r\n/**\r\n * This class is the Authentication Service class. It will create tokens, token timers, check if authenticated\r\n * and it will show the users role/ID.\r\n */\r\nexport class AuthService {\r\n  private token: string;\r\n  private tokenTimer: any;\r\n  private userId: string;\r\n  private role: string;\r\n  private isAuthenticated = false;\r\n  private authStatus = new Subject<boolean>();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  /**\r\n   * Returns token if request from outside this component.\r\n   */\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n\r\n  /**\r\n   * Returns if user is authenticated from outside this component when requested.\r\n   */\r\n  getIsAuth() {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  /**\r\n   * Returns the authentication status as an Observable.\r\n   */\r\n  getAuthStatus() {\r\n    return this.authStatus.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Returns the current user ID.\r\n   */\r\n  getUserId() {\r\n    return this.userId;\r\n  }\r\n\r\n  /**\r\n   * Returns the users role, provided by this service.\r\n   */\r\n  getUserRole() {\r\n    return this.role;\r\n  }\r\n\r\n  /**\r\n   * This is the Post query to create a user, currently it is enabled but probably will be disabled so users\r\n   * can not create fake accounts. Maybe implement this so only Admins can create accounts.\r\n   * @param email Email of the user being created.\r\n   * @param password Password of the user being created(Gets Hashed).\r\n   * @param role Role of the user when creating account.\r\n   */\r\n  createUser(email: string, password: string, role: string) {\r\n    const authData: AuthData = {email: email, password: password, role: role};\r\n    this.http\r\n      .post(BACKEND_URL + '/signup', authData)\r\n      .subscribe(() => {\r\n        this.router.navigate(['/auth/login']);\r\n      }, error => {\r\n        this.authStatus.next(false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * These are the login details which get passed to the backend and get checked if they match the records\r\n   * in the database.\r\n   * @param email Email the user has entered to login.\r\n   * @param password Password the user has entered to login.\r\n   * @param role Role the user has entered to login.\r\n   */\r\n  userLogin(email: string, password: string, role: string) {\r\n    const authData: AuthData = {email: email, password: password, role: role};\r\n    this.http.post<{ token: string, expiresIn: number, userId: string, role: string }>(\r\n      BACKEND_URL + '/login', authData)\r\n    .subscribe(response => {\r\n      const token = response.token;\r\n      this.token = token;\r\n      if (token) {\r\n        const expiresDuration = response.expiresIn;\r\n        this.authTimer(expiresDuration);\r\n        this.isAuthenticated = true;\r\n        this.role = response.role;\r\n        this.userId = response.userId;\r\n        this.authStatus.next(true);\r\n        const now = new Date();\r\n        const expirationDate = new Date(now.getTime() + expiresDuration * 1000);\r\n        this.saveAuthData(token, expirationDate, this.userId, this.role);\r\n        this.router.navigate(['/course']);\r\n      }\r\n    }, error => {\r\n      this.authStatus.next(false);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This will check if the user is in the past, if the user is in the past it will return, if not in the past\r\n   * then it will set a token timer.\r\n   */\r\n  authUser() {\r\n    const authInfo = this.getAuthData();\r\n    if (!authInfo) {\r\n      return;\r\n    }\r\n    const now = new Date();\r\n    const expiresIn = authInfo.expirationDate.getTime() - now.getTime();\r\n    if (expiresIn > 0) {\r\n      this.token = authInfo.token;\r\n      this.isAuthenticated = true;\r\n      this.userId = authInfo.userId;\r\n      this.role = authInfo.role;\r\n      this.authTimer(expiresIn / 1000);\r\n      this.authStatus.next(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This would be the logout method that gets called when a user logs out. So it sets the token to null, clears token,\r\n   * sets authentication to false, clears authentication data, resets all the fields below as can be seen. Then redirects\r\n   * user to the '/auth/login' page.\r\n   */\r\n  logout() {\r\n    this.token = null;\r\n    this.isAuthenticated = false; // Sets Auth to false\r\n    this.authStatus.next(false);\r\n    clearTimeout(this.tokenTimer); // Clear token timer\r\n    this.clearAuthData();\r\n    this.userId = null;\r\n    this.role = null;\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  /**\r\n   * Saves token, expiration date, user ID and role to local storage.\r\n   * @param token This would be the token that the user stores in the local storage.\r\n   * @param expirationDate The expiration date of the token that gets stored.\r\n   * @param userId The user ID gets stored of the user in the local storage.\r\n   * @param role The role of the user gets stored in the local storage too.\r\n   */\r\n  private saveAuthData(token: string, expirationDate: Date, userId: string, role: string) {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('expiration', expirationDate.toISOString());\r\n    localStorage.setItem('userId', userId);\r\n    localStorage.setItem('role', role);\r\n  }\r\n\r\n  /**\r\n   * Clears the token, removes the expiration date of token, the user ID and the role of the user.\r\n   */\r\n  private clearAuthData() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expiration');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('role');\r\n  }\r\n\r\n  /**\r\n   * This gets the authentication data such as the token, the expiration date of the token, the user ID\r\n   * and the user role. If there is no token and expirationData then simply return.\r\n   */\r\n  private getAuthData() {\r\n    const token = localStorage.getItem('token');\r\n    const expirationDate = localStorage.getItem('expiration');\r\n    const userId = localStorage.getItem('userId');\r\n    const role = localStorage.getItem('role');\r\n    if (!token || !expirationDate) {\r\n      return;\r\n    }\r\n    return {\r\n      token: token,\r\n      expirationDate: new Date(expirationDate),\r\n      userId: userId,\r\n      role: role\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Auth Timer sets the authantication token timer, when the time is up it will simply call the logout method.\r\n   * @param duration The duration of the token, gets sent to console so it can be seen.\r\n   */\r\n  private authTimer(duration: number) {\r\n    console.log('setting timer: ' + duration);\r\n    this.tokenTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, duration * 1000);\r\n  }\r\n\r\n}\r\n","module.exports = \".container {\\r\\n  padding-top: 2.5em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.imgshrink {\\r\\n  max-width: 10em;\\r\\n  min-height: 11em;\\r\\n}\\r\\n\\r\\n.card {\\r\\n  margin: 0 auto;\\r\\n  float: none;\\r\\n  max-width: 17em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.space {\\r\\n  margin-top: 2em;\\r\\n  min-height: 5em;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card shadow-sm rounded\\\" (click)=\\\"onClickWeb('First Year Seminar')\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h5 class=\\\"card-title\\\">First Year Seminar</h5>\\r\\n        <img class=\\\"card-img-top imgshrink\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/2/20/Text-x-generic_with_pencil.svg\\\"\\r\\n          alt=\\\"Card image cap\\\">\\r\\n        <p class=\\\"card-text space\\\">Click to view the First Year Seminar Page.</p>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <small class=\\\"text-muted\\\">(6G6Z345431_171834_93Z6)</small>\\r\\n        </p>\\r\\n      </div>\\r\\n    </div>\\r\\n    </div>\\r\\n    <!-- <div class=\\\"card-deck\\\">\\r\\n     <div class=\\\"card shadow-sm rounded\\\" (click)=\\\"onClickWeb('Advanced..Web..Development')\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h5 class=\\\"card-title\\\">Advanced Web Development</h5>\\r\\n        <img class=\\\"card-img-top\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg\\\"\\r\\n          alt=\\\"Card image cap\\\">\\r\\n        <p class=\\\"card-text\\\"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis\\r\\n          natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <small class=\\\"text-muted\\\">(6G6Z345431_171834_93Z6)</small>\\r\\n        </p>\\r\\n      </div>\\r\\n    </div>\\r\\n     <div class=\\\"card shadow-sm rounded\\\" (click)=\\\"onClickWeb('Data..Engineering')\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h5 class=\\\"card-title\\\">Data Engineering</h5>\\r\\n        <img class=\\\"card-img-top\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/4/46/BigData_2267x1146_white.png\\\"\\r\\n          alt=\\\"Card image cap\\\">\\r\\n        <p class=\\\"card-text\\\"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis\\r\\n          natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <small class=\\\"text-muted\\\">(643G236_33248_923Z6)</small>\\r\\n        </p>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"card shadow-sm rounded\\\" (click)=\\\"onClickWeb('Project..Managment')\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h5 class=\\\"card-title\\\">Project Managment</h5>\\r\\n        <img class=\\\"card-img-top\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/3/37/Toicon-icon-fandom-game.svg\\\"\\r\\n          alt=\\\"Card image cap\\\">\\r\\n        <p class=\\\"card-text\\\"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis\\r\\n          natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <small class=\\\"text-muted\\\">(634ZG1101_5718_9Z6)</small>\\r\\n        </p>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"card shadow-sm rounded\\\" (click)=\\\"onClickWeb('Information..Systems..Strategy')\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <h5 class=\\\"card-title\\\">Information Systems Strategy</h5>\\r\\n        <img class=\\\"card-img-top\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/d/d0/NIST_Enterprise_Architecture_Model.jpg\\\"\\r\\n          alt=\\\"Card image cap\\\">\\r\\n        <p class=\\\"card-text\\\"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis\\r\\n          natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <small class=\\\"text-muted\\\">(6G62336_123418_93Z6)</small>\\r\\n        </p>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  <!-- </div> -->\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-course',\r\n  templateUrl: './course.component.html',\r\n  styleUrls: ['./course.component.css']\r\n})\r\nexport class CourseComponent implements OnInit {\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  /**\r\n   * If a module is clicked, it will then route you to the module page.\r\n   */\r\n  onClickWeb(text) {\r\n    this.router.navigate(['/module', text]);\r\n  }\r\n}\r\n","module.exports = \".container {\\r\\n  padding-top: 2em;\\r\\n  max-width: 50%;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <!-- <div class=\\\"card\\\"> -->\\r\\n    <!-- <div class=\\\"card-body\\\"> -->\\r\\n        <h5 class=\\\"card-title\\\">{{ moduleNameWithoutPunc }}</h5>\\r\\n      <!-- <h5 class=\\\"card-title\\\">{{Web Development}}</h5> -->\\r\\n      <!-- <p class=\\\"card-text\\\"> Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.</p>\\r\\n      <p class=\\\"card-text\\\">\\r\\n        <small class=\\\"text-muted\\\">\\r\\n          (6G6Z345431_171834_93Z6)\\r\\n        </small>\\r\\n      </p> -->\\r\\n    <!-- </div> -->\\r\\n  <!-- </div> -->\\r\\n  <br>\\r\\n  <app-create-post></app-create-post>\\r\\n  <app-show-post></app-show-post>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\n// import { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-module',\r\n  templateUrl: './module.component.html',\r\n  styleUrls: ['./module.component.css']\r\n})\r\nexport class ModuleComponent implements OnInit {\r\n  createPost = true;\r\n  private theModuleName;\r\n  public moduleNameWithoutPunc;\r\n\r\n  constructor(public route: ActivatedRoute) {}\r\n\r\n  ngOnInit() {\r\n    this.theModuleName = this.route.snapshot.paramMap.get('text');\r\n    const withoutPunct = this.theModuleName.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`'~()]/g, ' ');\r\n    this.moduleNameWithoutPunc = withoutPunct;\r\n  }\r\n}\r\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\n\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ErrorService } from './error/error.service';\r\n\r\n@Injectable()\r\n\r\n/**\r\n * Error Interceptor class handles the errors. It handles the error by sending over\r\n * the error message to the Error Component, which then displays it.\r\n */\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private dialog: MatDialog, private errorService: ErrorService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = 'An unknown error occurred!';\r\n        if (error.error.message) {\r\n          errorMessage = error.error.message;\r\n        }\r\n        this.dialog.open(ErrorComponent, {data: {message: errorMessage}});\r\n        // alert(error.error.message);\r\n        return throwError(error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>An Error Occurred!</h1>\\r\\n<div mat-dialog-content>\\r\\n  <p class=\\\"mat-body-1\\\">{{ data?.message }}</p>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n  <button mat-button mat-dialog-close>Okay</button>\\r\\n</div>\\r\\n\"","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  templateUrl: './error.component.html',\r\n  selector: 'app-error',\r\n})\r\n\r\n/**\r\n * Error Component handles the errors using the Mat_Dialog popup provided by Angular Material.\r\n */\r\nexport class ErrorComponent {\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { message: string }) {}\r\n}\r\n","import { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\n/**\r\n * Error Service will listen to any errors. If it captures any errors it will send them to the error.component.ts.\r\n * There it will be handled by the Mat_Dialog popup.\r\n */\r\nexport class ErrorService {\r\n  private errorListener = new Subject<string>();\r\n\r\n  getErrorListener() {\r\n    return this.errorListener.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This will push the error through to the listener which then gets caught by the error.component.ts.\r\n   * @param message This message gets pushed to the error.component.ts so the user can see the issue.\r\n   */\r\n  throwError(message: string) {\r\n    this.errorListener.next(message);\r\n  }\r\n\r\n  handleError() {\r\n    this.errorListener.next(null);\r\n  }\r\n}\r\n","\r\nexport class highlightWords{\r\n    constructor(highlightManager, difficultWords){\r\n        this.highlightManager = highlightManager;\r\n        this.difficultWords = difficultWords;\r\n    }\r\n    apply(type = 'optional'){\r\n        if(type != 'optional')this.difficultWords = this.difficultWords.filter(el=>typeof(el)===\"string\");\r\n        \r\n        this.difficultWords.sort((a,b)=>a.length-b.length); //sort by ascending length, match longest case of a phrase\r\n    \r\n        for(let token of this.difficultWords){\r\n            this.highlightManager.findTokens(token).highlight(type);\r\n        }\r\n        this.highlightManager.buildDoc();\r\n    }\r\n}","export class highlightManager{\r\n    constructor(element){\r\n        this.element = element;\r\n        this.document = this.element.innerHTML;;\r\n        this.docUncased;\r\n        this.docChars = this.document.split(\"\");\r\n        this.obj = [];\r\n        this.buildObj();\r\n        this.occurs;\r\n        this.optional = '<a class=\"optional\" style=\"background-color:#dcdfe5; text-decoration: underline;\">'\r\n        this.clickable = '<a class=\"clickable\" style=\"background-color: yellow; text-decoration: underline;\">'\r\n    } //we should store highlighted words;\r\n    buildObj(){\r\n        for(let i in this.docChars){\r\n            let cur = {\r\n                \"tagged\":false,\r\n                \"formatting\":\"\",\r\n                \"pre\":\"\",\r\n                \"char\":this.docChars[i],\r\n                \"post\":\"\",\r\n            }\r\n            this.obj.push(cur);\r\n        }\r\n        let tempObj = [];\r\n\r\n        for(let i=0; i<this.obj.length;i++){\r\n            if(i!=this.obj.length-1){\r\n                if(this.obj[i].char.match(/\\r?\\n|\\r/ig)){\r\n                    this.obj[i+1].formatting = `${this.obj[i].formatting}${this.obj[i].char}`;\r\n                    if(this.obj[i-1].char.trim().length && this.obj[i+1].char.trim().length) this.obj[i].char = \" \"; //document may contain a newline and no space break between words causing non match\r\n                    else {\r\n                        continue;\r\n                    }\r\n                } //newlines // adds non important characters to the next words formatting attribute\r\n                if(!this.obj[i].char.trim().length && !this.obj[i+1].char.trim().length){this.obj[i+1].formatting = `${this.obj[i].formatting}${this.obj[i].char}`; continue;} //store but remove double whitespaces\r\n                tempObj.push(this.obj[i]); //continue statements are used if the above conditions are met\r\n            }else tempObj.push(this.obj[i]);\r\n        }\r\n        this.obj = tempObj;\r\n        this.document = this.obj.map(el=>el.char).join('');\r\n        this.docUncased = this.document.toLowerCase();\r\n    }\r\n    findTokens(_word){\r\n        let word = _word.toLowerCase().replace(/[)(]/g,\"\"); //remove brackets, issues with brackets;\r\n        let occurs =  [...this.docUncased.matchAll(word)].map(el=>[el.index,el.index+el[0].length]);\r\n        this.occurs = occurs;\r\n        return this;\r\n    }\r\n    highlight(type){ \r\n        let highlightClass;\r\n        switch(type){\r\n            case 'optional':\r\n                highlightClass = this.optional;\r\n                break;\r\n            case 'clickable':\r\n                highlightClass = this.clickable;\r\n        }\r\n        for(let index of this.occurs){\r\n            let i1 = index[0]; let i2 = index[1];\r\n\t\t\tif(type == 'optional'){ //allow subwords that have been manually annotated\r\n\t\t\t\tif(i1!=0 && this.obj[i1-1].char.match(/['’a-z—–-]/ig) || i2!=this.obj.length && this.obj[i2].char.match(/['’a-z—–-]/ig)){\r\n\t\t\t\t\tcontinue; //don't want to match subwords i.e because shoudn't have cause highlighted\r\n\t\t\t\t}\r\n\t\t\t}\r\n            let toHighlight = this.obj.slice(...index);\r\n            for(let el of toHighlight){\r\n                el.tagged = false;\r\n                el.pre='';\r\n                el.post='';\r\n            }\r\n            toHighlight[0].pre = highlightClass;\r\n\r\n            if(highlightClass == this.clickable) toHighlight[toHighlight.length-1].post = '</endClickable>';\r\n            else toHighlight[toHighlight.length-1].post = '</a>'; \r\n\r\n            for(let char of toHighlight) char.tagged = true;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    buildDoc(){\r\n        let newDoc = this.obj.map(el=>{\r\n            let post = el.post;\r\n            if(el.post == '</endClickable>')post = '</a>';\r\n            return [el.formatting,el.pre,el.char,post];\r\n        }).flat(1).join(\"\");\r\n\r\n        this.element.innerHTML = newDoc;\r\n    }\r\n    reset(){\r\n        this.obj = this.obj.map(el=>{\r\n            let pre = \"\";\r\n            let post = \"\";\r\n            if(el.pre == this.clickable) pre = ''//this.clickable;\r\n            if(el.post == '</endClickable>')post = ''//</endClickable>';\r\n            return {\r\n                \"tagged\":false,\r\n                \"formatting\":el.formatting,\r\n                \"pre\":pre,\r\n                \"char\":el.char,\r\n                \"post\":post,\r\n            }\r\n        });   \r\n        this.buildDoc();\r\n    }\r\n\t\r\n\t\r\n\tgetItemIndex(start_,word){  //for grabbing word in context for definition selection\r\n\t\tlet at = 0\r\n\t\tlet strings = []\r\n\t\tlet start = null\r\n\t\tlet end = null\r\n\t\tlet periods = [null,null]\r\n\t\t\r\n\t\tfor(let key in this.obj){\r\n\t\t\tlet cur = this.obj[key]\r\n\t\t\tif(start==null && cur.char == '.'){\r\n\t\t\t\tperiods[0] = parseInt(key)+1;\r\n\t\t\t}\r\n\t\t\tif(start!=null && cur.char == '.'){\r\n\t\t\t\tperiods[1] = parseInt(key)+1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tfor(let i=0; i<cur.formatting.length+1;i++){\r\n\t\t\t\tif(start == null && at == start_){\r\n\t\t\t\t\tstart = parseInt(key);\r\n\t\t\t\t}\r\n\t\t\t\tat += 1\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {'query':this.document.substr(start,word.length),'string':this.document.substr(periods[0],periods[1]-periods[0])}\r\n\t\t\r\n\t}\r\n}\r\n","module.exports = \"/* .navbar-nav {\\r\\n  width: 100%;\\r\\n  text-align: center;\\r\\n} */\\r\\n\\r\\n/* .nav-item-cust {\\r\\n  padding-left: 50px;\\r\\n} */\\r\\n\\r\\n/* #navbarColor {\\r\\n  color: black;\\r\\n} */\\r\\n\\r\\n/* .mr-auto {\\r\\n  margin-right: auto !important;\\r\\n} */\\r\\n\\r\\n#navbar {\\r\\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif !important;\\r\\n}\\r\\n\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\" id=\\\"navbar\\\" style=\\\"background-color: #e1e5e9;\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"/course\\\">CTAS</a>\\r\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNav\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\"\\r\\n      aria-label=\\\"Toggle navigation\\\">\\r\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\r\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n        <!-- <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n          <a class=\\\"nav-link\\\" id=\\\"navbarColor\\\" routerLink=\\\"/home\\\">Home\\r\\n            <span class=\\\"sr-only\\\">(current)</span>\\r\\n          </a>\\r\\n        </li> -->\\r\\n        <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\r\\n          <a class=\\\"nav-link\\\" id=\\\"navbarColor\\\" routerLink=\\\"/course\\\">My Course</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"this.role === 'admin'\\\">\\r\\n          <a class=\\\"nav-link\\\" id=\\\"navbarColor\\\" routerLink=\\\"/analytics\\\">Analytics</a>\\r\\n        </li>\\r\\n      </ul>\\r\\n      <ul class=\\\"navbar-nav\\\">\\r\\n        <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\" *ngIf=\\\"!userIsAuthenticated\\\">\\r\\n          <a class=\\\"nav-link\\\" id=\\\"navfix1\\\" routerLink=\\\"/auth/login\\\">Log In</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\" *ngIf=\\\"userIsAuthenticated\\\">\\r\\n          <a class=\\\"nav-link\\\" id=\\\"navfix2\\\" (click)=\\\"onLogout()\\\">Log Out</a>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </div>\\r\\n  </div>\\r\\n</nav>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\n\r\n/**\r\n * Navbar Component handles the navigation pane and at the same time, checks if the user is authenticated.\r\n */\r\nexport class NavbarComponent implements OnInit, OnDestroy {\r\n  private authListener: Subscription;\r\n  private authStatus: Subscription;\r\n  public isLoading = true;\r\n  public role: string;\r\n  userIsAuthenticated = false;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authListener = this.authService.getAuthStatus().subscribe(isAuthenticated => {\r\n      this.userIsAuthenticated = isAuthenticated;\r\n    });\r\n\r\n    this.role = this.authService.getUserRole();\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatus = this.authService\r\n      .getAuthStatus()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.role = this.authService.getUserRole();\r\n      });\r\n    this.isLoading = false;\r\n  }\r\n\r\n  /**\r\n   * When clicked logout, then it will call the authentication service, which will trigger more actions such as: Clearing\r\n   * tokens and other informtion.\r\n   */\r\n  onLogout() {\r\n    this.authService.logout();\r\n  }\r\n\r\n  /**\r\n   * When the naviation is navigated away from, which only happens on reloads then unsubscribe and create new subscription.\r\n   */\r\n  ngOnDestroy() {\r\n    this.authListener.unsubscribe();\r\n    this.authStatus.unsubscribe();\r\n  }\r\n\r\n}\r\n","module.exports = \"#postbtn {\\r\\n  margin-top: 1em;\\r\\n  margin-bottom: 2em;\\r\\n}\\r\\n\\r\\n.container {\\r\\n  text-align: center;\\r\\n  /* padding-top: 0.25em; */\\r\\n}\\r\\n\\r\\n.input-group {\\r\\n  padding-bottom: 1em;\\r\\n}\\r\\n\\r\\nmat-spinner {\\r\\n  margin: auto;\\r\\n}\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n<div class=\\\"container\\\">\\r\\n  <ng-template [ngIf]=\\\"userIsAuthenticated && this.role == 'teacher' || userIsAuthenticated && this.role == 'admin'\\\">\\r\\n    <form [formGroup]='form' name=\\\"test\\\" *ngIf=\\\"!isLoading\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <input type=\\\"text\\\" class=\\\"form-control ng-pristine ng-invalid\\\" name=\\\"header\\\" placeholder=\\\"Post Title\\\" formControlName=\\\"header\\\">\\r\\n      </div>\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <textarea class=\\\"form-control\\\" rows=\\\"3\\\" name=\\\"message\\\" placeholder=\\\"Info (Description)\\\" formControlName=\\\"message\\\"></textarea>\\r\\n      </div>\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <textarea class=\\\"form-control\\\" rows=\\\"3\\\" name=\\\"abstract\\\" placeholder=\\\"Abstract\\\" formControlName=\\\"abstract\\\"></textarea>\\r\\n      </div>\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <textarea class=\\\"form-control\\\" rows=\\\"3\\\" name=\\\"body\\\" placeholder=\\\"Body (Content)\\\" formControlName=\\\"body\\\"></textarea>\\r\\n      </div>\\r\\n      <div class=\\\"input-group\\\">\\r\\n        <textarea class=\\\"form-control\\\" rows=\\\"3\\\" name=\\\"references\\\" placeholder=\\\"References (Links to external web pages/books)\\\" formControlName=\\\"references\\\"></textarea>\\r\\n      </div>\\r\\n      <button class=\\\"btn btn-success btn-sm\\\" id=\\\"postbtn\\\" type=\\\"button\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"onSavePost()\\\">{{ btnText }}</button>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n</div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { PostsService } from '../posts.service';\r\nimport { Post } from '../post.model';\r\nimport { AuthService } from '../../auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-create-post',\r\n  templateUrl: './create-post.component.html',\r\n  styleUrls: ['./create-post.component.css']\r\n})\r\n\r\n/**\r\n * Create Post Component handles the creation of Posts. It also takes care of editing posts.\r\n * Checks if user is authenticated before allowing user to view particular buttons and restricts\r\n * user with a limited amount of features depending on authorisation level.\r\n */\r\nexport class CreatePostComponent implements OnInit, OnDestroy {\r\n  post: Post;\r\n  form: FormGroup;\r\n  role: string;\r\n  isLoading = false;\r\n  private postId: string;\r\n  private mode = 'create';\r\n  private authStatus: Subscription;\r\n  public userIsAuthenticated = false;\r\n  public btnText = 'Create Post';\r\n  private theModuleName;\r\n  public moduleNameWithoutPunc;\r\n\r\n  constructor(\r\n    public postsService: PostsService,\r\n    public route: ActivatedRoute,\r\n    private authService: AuthService,\r\n    public router: Router\r\n  ) {}\r\n\r\n  /**\r\n   * This runs when this component is loaded. Checks if the user is authenticted and what\r\n   * role the user is in order to be able to use extra features. It checks the Post ID which\r\n   * is set in the URL.\r\n   */\r\n  ngOnInit() {\r\n    this.theModuleName = this.route.snapshot.paramMap.get('text');\r\n    const withoutPunct = this.theModuleName.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`'~()]/g, ' ');\r\n    this.moduleNameWithoutPunc = withoutPunct;\r\n    this.form = this.createForm();\r\n    this.role = this.authService.getUserRole();\r\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\r\n      if (paramMap.has('postId')) {\r\n        this.mode = 'edit';\r\n        this.btnText = 'Modify Post';\r\n        this.postId = paramMap.get('postId');\r\n        this.isLoading = true;\r\n        this.postsService.getPost(this.postId).subscribe(postData => {\r\n          this.isLoading = false;\r\n          this.post = {\r\n            id: postData._id,\r\n            header: postData.header,\r\n            message: postData.message,\r\n            body: postData.body,\r\n            references: postData.references,\r\n            poster: postData.poster,\r\n            moduleName: postData.moduleName,\r\n            abstract: postData.abstract,\r\n          };\r\n          this.form.setValue({\r\n            header: this.post.header,\r\n            message: this.post.message,\r\n            body: this.post.body,\r\n            references: this.post.references,\r\n            abstract: this.post.abstract\r\n          });\r\n        });\r\n      } else {\r\n        this.mode = 'create';\r\n        this.btnText = 'Create Post';\r\n        this.postId = null;\r\n      }\r\n    });\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatus = this.authService\r\n      .getAuthStatus()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.role = this.authService.getUserRole();\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * CreateForm handles the form validation for the Post creation.\r\n   */\r\n  createForm(): FormGroup {\r\n    return new FormGroup({\r\n      header: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(200)\r\n        ]\r\n      }),\r\n      message: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(400)\r\n        ]\r\n      }),\r\n      body: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(5),\r\n          Validators.maxLength(15000)\r\n        ]\r\n      }),\r\n      references: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(5),\r\n          Validators.maxLength(2000)\r\n        ]\r\n      }),\r\n      abstract: new FormControl(null, {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(20),\r\n          Validators.maxLength(2000)\r\n        ]\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When onSavePost is called then, it checks if the form is valid if not it will return.\r\n   * The spinner is set to true until the process is complete.\r\n   * If the mode is on create it will call a different method from the Post Service.\r\n   * You will then get redirected once its complete to the '/module' followed by setting the\r\n   * spinner to false and reseting the form. Reseting the form is not required, but we have it\r\n   * just incase any issues arrise.\r\n   */\r\n  onSavePost() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    if (this.mode === 'create') {\r\n      this.postsService.addPost(\r\n        this.form.value.header,\r\n        this.form.value.message,\r\n        this.form.value.body,\r\n        this.form.value.references,\r\n        this.postId,\r\n        this.moduleNameWithoutPunc,\r\n        this.form.value.abstract\r\n      );\r\n    } else {\r\n      this.postsService.updatePost(\r\n        this.postId,\r\n        this.form.value.header,\r\n        this.form.value.message,\r\n        this.form.value.body,\r\n        this.form.value.references,\r\n        this.form.value.abstract\r\n      );\r\n      this.router.navigate(['/module', this.theModuleName]);\r\n    }\r\n    this.isLoading = false;\r\n    this.form.reset();\r\n  }\r\n\r\n  /**\r\n   * If you navigate of this HTML page it will then unsubscribe from the subscription to avoid\r\n   * memory leakage.\r\n   */\r\n  ngOnDestroy() {\r\n    this.authStatus.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { CreatePostComponent } from './create-post/create-post.component';\r\nimport { ShowPostComponent } from './show-post/show-post.component';\r\nimport { AngularMaterialModule } from '../angular-material.module';\r\n\r\n@NgModule({\r\n  declarations: [CreatePostComponent, ShowPostComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AngularMaterialModule,\r\n    RouterModule\r\n  ],\r\n  exports: [\r\n    CreatePostComponent,\r\n    ShowPostComponent\r\n  ]\r\n})\r\n\r\nexport class PostsModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { Post } from './post.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\nconst BACKEND_URL = environment.apiUrl + '/posts/';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\n/**\r\n * Post Service works with all the posts. There is a Put, Delete, Get and Post query.\r\n */\r\nexport class PostsService {\r\n  private posts: Post[] = [];\r\n  private postsUpdated = new Subject<Post[]>();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * This is the Get query. It requests the backend for all the Posts which include the\r\n   * header, message, post ID, body, references and the poster ID.\r\n   */\r\n  getPosts() {\r\n    this.http\r\n      .get<{ message: string; posts: any }>(BACKEND_URL)\r\n      .pipe(\r\n        map(postData => {\r\n          return postData.posts.map(post => {\r\n            return {\r\n              header: post.header,\r\n              message: post.message,\r\n              id: post._id,\r\n              body: post.body,\r\n              references: post.references,\r\n              poster: post.poster,\r\n              moduleName: post.moduleName,\r\n              abstract: post.abstract\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe(transformedPosts => {\r\n        this.posts = transformedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This is the get updated posts as Observable.\r\n   */\r\n  getPostUpdateListenerTwo() {\r\n    return this.postsUpdated.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This gets the posts as an observable with a type (currently set as <any>).\r\n   */\r\n  getPostUpdateListener(): Observable<any> {\r\n    return this.http.get<any>(BACKEND_URL);\r\n}\r\n\r\n  /**\r\n   * This returns the post with the ID, header, message, body, reference and\r\n   * the poster, by providing the ID to the post.\r\n   * @param id Gets post by the ID.\r\n   */\r\n  getPost(id: string) {\r\n    // tslint:disable-next-line:max-line-length\r\n    return this.http.get<{ _id: string, header: string, message: string, body: string, references: string, poster: string, moduleName: string, abstract: string }>(\r\n      BACKEND_URL + id\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This is a Post method, you are passing the header, message, body, references and poster.\r\n   * The ID of the post gets done automatically by Mongoose.\r\n   * @param header The header of the post provided by the user when creating the post.\r\n   * @param message The message of the post provided by the user when creating the post.\r\n   * @param body The body of the post provided by the user when creating the post.\r\n   * @param references The reference of the post provided by the user when creating the post.\r\n   * @param poster The poster of the post provided by the user when creating the post.\r\n   */\r\n  addPost(header: string, message: string, body: string, references: string, poster: string, moduleName: string, abstract: string) {\r\n    const postData = {\r\n      header: header,\r\n      message: message,\r\n      body: body,\r\n      references: references,\r\n      moduleName: moduleName,\r\n      abstract: abstract\r\n    };\r\n    console.log(postData);\r\n    this.http\r\n      .post<{ message: string; post: Post }>(\r\n        BACKEND_URL,\r\n        postData\r\n      )\r\n      .subscribe(responseData => {\r\n        const post: Post = {\r\n          id: responseData.post.id,\r\n          header: header,\r\n          message: message,\r\n          body: body,\r\n          references: references,\r\n          poster: poster,\r\n          moduleName: moduleName,\r\n          abstract: abstract\r\n        };\r\n        this.posts.push(post);\r\n        this.postsUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This is the Put method, You provide the header, message, body and reference and the ID of\r\n   * the Post and the Poster is not required to be provided since they should not change.\r\n   * @param id ID is automatically provided, this was tweaked in the Show.Post.component\r\n   * @param header The header of the post provided by the user when updating the post.\r\n   * @param message The message of the post provided by the user when updating the post.\r\n   * @param body The body of the post provided by the user when updating the post.\r\n   * @param references The reference of the post provided by the user when updating the post.\r\n   */\r\n  updatePost(id: string, header: string, message: string, body: string, references: string, abstract: string) {\r\n    let postData: Post;\r\n        postData = {\r\n        id: id,\r\n        header: header,\r\n        message: message,\r\n        body: body,\r\n        references: references,\r\n        poster: null,\r\n        abstract: abstract,\r\n      };\r\n    this.http\r\n      .put(BACKEND_URL + id, postData)\r\n      .subscribe(response => {\r\n        const updatedPosts = [...this.posts];\r\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\r\n        const post: Post = {\r\n          id: id,\r\n          header: header,\r\n          message: message,\r\n          body: body,\r\n          references: references,\r\n          poster: null,\r\n          abstract: abstract,\r\n        };\r\n        updatedPosts[oldPostIndex] = post;\r\n        this.posts = updatedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This is a delete method, you send the ID of the post that you want to delete\r\n   * to the backend.\r\n   * @param postId The ID of the Post that the user wishes to delete.\r\n   */\r\n  deletePost(postId: string) {\r\n    this.http\r\n      .delete(BACKEND_URL + postId)\r\n      .subscribe(() => {\r\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\r\n        this.posts = updatedPosts;\r\n        this.postsUpdated.next([...this.posts]);\r\n      });\r\n  }\r\n\r\n  pageVisitCount(postId: string) {\r\n    const postViewCount = {\r\n      postId: postId\r\n    };\r\n    return this.http\r\n    .post(BACKEND_URL + '/page-count', postViewCount)\r\n    .subscribe(\r\n      response => {\r\n        // console.log(response);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \"#deleteBtn {\\r\\n  margin-left: 1em;\\r\\n}\\r\\n\\r\\n.card-title {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n#editBtn {\\r\\n  margin-left: 1em;\\r\\n}\\r\\n\\r\\n#btnPro {\\r\\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\\r\\n  font-family: courier;\\r\\n  color: white;\\r\\n}\\r\\n\\r\\nmat-spinner {\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n/* #btn {\\r\\n  max-height: 3px;\\r\\n} */\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n<div class=\\\"container\\\">\\r\\n  <ng-template [ngIf]=\\\"posts.length > 0 && !isLoading\\\">\\r\\n    <ng-template ngFor let-post [ngForOf]=\\\"posts\\\" let-$index=\\\"index\\\">\\r\\n      <div class=\\\"card\\\" *ngIf=\\\"post.moduleName === this.moduleNameWithoutPunc\\\">\\r\\n        <div id=\\\"accordion\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <h5 class=\\\"mb-0\\\">\\r\\n              <button class=\\\"btn btn-link\\\" data-toggle=\\\"collapse\\\" [attr.data-target]=\\\"'#demo' + $index\\\" aria-expanded=\\\"true\\\"\\r\\n                aria-controls=\\\"collapseOne\\\">\\r\\n                {{ post.header }}\\r\\n              </button>\\r\\n            </h5>\\r\\n            <div id=\\\"demo{{$index}}\\\" class=\\\"collapse hide\\\" aria-labelledby=\\\"headingOne\\\" data-parent=\\\"#accordion\\\">\\r\\n              <div class=\\\"card-body\\\">\\r\\n                {{ post.message }}\\r\\n                <hr>\\r\\n                <a class=\\\"btn btn-dark btn-sm\\\" id=\\\"btnPro\\\" (click)=\\\"onAnnotation(post.id)\\\"> View Document\\r\\n                  <i class=\\\"far fa-file-alt\\\"></i>\\r\\n                </a>\\r\\n              </div>\\r\\n            </div>\\r\\n            <ng-template [ngIf]=\\\"userIsAuthenticated && userId == post.poster || userIsAuthenticated && this.role == 'admin'\\\">\\r\\n              <hr>\\r\\n              <button class=\\\"btn btn-outline-primary btn-sm\\\" id=\\\"editBtn\\\" (click)=\\\"onEdit(post.id)\\\">Edit</button>\\r\\n              <button class=\\\"btn btn-outline-danger btn-sm\\\" id=\\\"deleteBtn\\\" (click)=\\\"onDelete(post.id)\\\">Delete</button>\\r\\n            </ng-template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n  </ng-template>\\r\\n  <div>\\r\\n    <p *ngIf=\\\"posts.length <= 0 && !isLoading\\\">No posts added yet!</p>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Post } from '../post.model';\r\nimport { PostsService } from '../posts.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-show-post',\r\n  templateUrl: './show-post.component.html',\r\n  styleUrls: ['./show-post.component.css']\r\n})\r\n\r\n/**\r\n * Show Post Component, this component reterives all the posts from the database.\r\n * They can then be edited through this component. The loading spinner turns true\r\n * until the posts have all been reterived.\r\n */\r\nexport class ShowPostComponent implements OnInit, OnDestroy {\r\n  posts: Post[] = [];\r\n  isLoading: boolean;\r\n  userId: string;\r\n  role: string;\r\n  private postsSub: Subscription;\r\n  private editClicked = false;\r\n  private annoClicked = false;\r\n  private authStatus: Subscription;\r\n  private theModuleName;\r\n  public userIsAuthenticated = false;\r\n  public moduleNameWithoutPunc;\r\n\r\n  constructor(\r\n    public postsService: PostsService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    public route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.theModuleName = this.route.snapshot.paramMap.get('text');\r\n    const withoutPunct = this.theModuleName.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`'~()]/g, ' ');\r\n    this.moduleNameWithoutPunc = withoutPunct;\r\n    this.isLoading = true;\r\n    this.postsService.getPosts();\r\n    this.role = this.authService.getUserRole();\r\n    this.userId = this.authService.getUserId();\r\n    this.postsSub = this.postsService\r\n      .getPostUpdateListenerTwo()\r\n      .subscribe((posts: Post[]) => {\r\n        const thePosts = posts;\r\n        this.isLoading = false;\r\n        thePosts.map(post => {\r\n          if (post.moduleName === this.moduleNameWithoutPunc) {\r\n            this.posts = posts;\r\n          }\r\n        });\r\n        this.posts.reverse();\r\n      });\r\n    this.userIsAuthenticated = this.authService.getIsAuth();\r\n    this.authStatus = this.authService\r\n      .getAuthStatus()\r\n      .subscribe(isAuthenticated => {\r\n        this.userIsAuthenticated = isAuthenticated;\r\n        this.userId = this.authService.getUserId();\r\n        this.role = this.authService.getUserRole();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * When clicking the edit post it sets it to true and then navigates you to /edit with\r\n   * the post ID that you wish to edit.\r\n   * @param postId The ID of the post you wish to edit.\r\n   */\r\n  onEdit(postId: string) {\r\n    if (this.editClicked === false) {\r\n      this.editClicked = true;\r\n      this.router.navigate(['/module', this.theModuleName, 'edit', postId]);\r\n      // this.router.navigate(['/edit', postId]);\r\n    } else {\r\n      this.editClicked = false;\r\n      this.router.navigate(['/module', this.theModuleName]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When clicking the document icon/button on the Post, you can then view the annotation,\r\n   * it will redirect you to '/annotation' and passes the postId.\r\n   * @param postId The ID of the post you want to view.\r\n   */\r\n  onAnnotation(postId: string) {\r\n    if (this.annoClicked === false) {\r\n      this.annoClicked = true;\r\n      if (this.role === 'student') {\r\n        this.postsService.pageVisitCount(postId);\r\n      }\r\n      this.router.navigate(['/annotation', postId]);\r\n    }\r\n    this.annoClicked = false;\r\n  }\r\n\r\n  /**\r\n   * When onDelete method will delete the Post ID you have passed through by clicking the\r\n   * delete on the post.\r\n   * @param postId The ID of the post you wish to delete.\r\n   */\r\n  onDelete(postId: string) {\r\n    // this.isLoading = true;\r\n    this.postsService.deletePost(postId);\r\n  }\r\n\r\n  /**\r\n   * If you navigate of this HTML page it will then unsubscribe from the subscription to avoid\r\n   * memory leakage.\r\n   */\r\n  ngOnDestroy() {\r\n    this.postsSub.unsubscribe();\r\n    this.authStatus.unsubscribe();\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:3000/api'\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}