{"version":3,"sources":["webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/signup/signup.component.css","webpack:///./src/app/signup/signup.component.html","webpack:///./src/app/signup/signup.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { SignupComponent } from '../signup/signup.component';\r\n\r\n/**\r\n * These are the two routes which are loaded when the application is loaded. By only loading these two,\r\n * it then gives the advantage of lazy loading, increases performance. Only load required pages.\r\n */\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { SignupComponent } from '../signup/signup.component';\r\nimport { AngularMaterialModule } from '../angular-material.module';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    SignupComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AuthRoutingModule\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","module.exports = \".container {\\r\\n  padding-top: 3em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n#userRole {\\r\\n  margin-top: 1.5em;\\r\\n}\\r\\n\\r\\n.textCenter {\\r\\n  text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n<div class=\\\"container\\\">\\r\\n  <form [formGroup]='form' (submit)=\\\"onLogin()\\\" *ngIf=\\\"!isLoading\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n      </div>\\r\\n      <div class=\\\"col-6\\\">\\r\\n        <div class=\\\"card shadow-sm p-3 mb-5 bg-white rounded\\\" style=\\\"width: 30rem;\\\">\\r\\n          <div class=\\\"card-body\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" class=\\\"form-control textCenter\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"password\\\" class=\\\"form-control textCenter\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n            </div>\\r\\n            <h6 class=\\\"card-subtitle mb-2 text-muted\\\" id=\\\"userRole\\\">User Role</h6>\\r\\n            <div class=\\\"form-check form-check-inline\\\">\\r\\n              <br>\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio1\\\" value=\\\"student\\\" formControlName=\\\"role\\\">\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"inlineRadio1\\\">Student</label>\\r\\n            </div>\\r\\n            <div class=\\\"form-check form-check-inline\\\">\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio2\\\" value=\\\"teacher\\\" formControlName=\\\"role\\\">\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"inlineRadio2\\\">Teacher</label>\\r\\n            </div>\\r\\n            <div class=\\\"form-check form-check-inline\\\">\\r\\n              <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio3\\\" value=\\\"admin\\\" formControlName=\\\"role\\\">\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"inlineRadio3\\\">Admin</label>\\r\\n            </div>\\r\\n            <div>\\r\\n              <br>\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Login</button>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col\\\"></div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { Subscription } from '../../../node_modules/rxjs';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\n/**\r\n * Login Component handles the user login, subscriptions and form validation.\r\n */\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  private authStatusSub: Subscription;\r\n  form: FormGroup;\r\n  isLoading = false;\r\n\r\n  constructor(private router: Router, public authService: AuthService) { }\r\n\r\n  /**\r\n   * When it gets the authentication status, the spinner becomes false.\r\n   */\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatus().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n\r\n    /**\r\n     * Email, Password and Role validation.\r\n     */\r\n    this.form = new FormGroup({\r\n      email: new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      password: new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      role: new FormControl('', {validators: [Validators.required]\r\n      }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * When login button is clicked, this method is called. If the form is invalid then return. If form is valid then\r\n   * values for the email, password and role will be pushed to the Auth Service, passing it through the UserLogin.\r\n   * Then navigating you to the course.\r\n   */\r\n  onLogin() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.authService.userLogin(this.form.value.email, this.form.value.password, this.form.value.role);\r\n    this.router.navigate(['/course']);\r\n  }\r\n\r\n  /**\r\n   * When user navigates away from the login.html it will unsubscribe the subscription so we don't get a memory leak.\r\n   */\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n","module.exports = \".textCenter {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.container {\\r\\n  padding-top: 3em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n#userRole {\\r\\n  margin-top: 1.5em;\\r\\n}\\r\\n\\r\\n\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\r\\n<div class=\\\"container\\\">\\r\\n    <form [formGroup]='form' (submit)=\\\"onSignup()\\\" *ngIf=\\\"!isLoading\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n              <div class=\\\"card shadow-sm p-3 mb-5 bg-white rounded\\\" style=\\\"width: 30rem;\\\">\\r\\n                <div class=\\\"card-body\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" class=\\\"form-control textCenter\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control textCenter\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n                  </div>\\r\\n                  <h6 class=\\\"card-subtitle mb-2 text-muted\\\" id=\\\"userRole\\\">User Role</h6>\\r\\n                  <div class=\\\"form-check form-check-inline\\\">\\r\\n                    <br>\\r\\n                    <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio1\\\" value=\\\"student\\\" formControlName=\\\"role\\\">\\r\\n                    <label class=\\\"form-check-label\\\" for=\\\"inlineRadio1\\\">Student</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-check form-check-inline\\\">\\r\\n                    <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio2\\\" value=\\\"teacher\\\" formControlName=\\\"role\\\">\\r\\n                    <label class=\\\"form-check-label\\\" for=\\\"inlineRadio2\\\">Teacher</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-check form-check-inline\\\">\\r\\n                    <input class=\\\"form-check-input\\\" type=\\\"radio\\\" name=\\\"role\\\" id=\\\"inlineRadio3\\\" value=\\\"admin\\\" formControlName=\\\"role\\\">\\r\\n                    <label class=\\\"form-check-label\\\" for=\\\"inlineRadio3\\\">Admin</label>\\r\\n                  </div>\\r\\n                  <div>\\r\\n                    <br>\\r\\n                    <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Sign Up</button>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\"></div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Subscription } from '../../../node_modules/rxjs';\r\n\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\n\r\n/**\r\n * Signup Component handles the user signup, subscriptions and form validation.\r\n */\r\nexport class SignupComponent implements OnInit, OnDestroy {\r\n  form: FormGroup;\r\n  isLoading = false;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor(public authService: AuthService, private fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.authStatusSub = this.authService.getAuthStatus().subscribe(\r\n      authStatus => {\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n\r\n    /**\r\n     * Email, Password and Role validation.\r\n     */\r\n    this.form = new FormGroup({\r\n      email: new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      password: new FormControl(null, {validators: [Validators.required, Validators.minLength(3)]\r\n      }),\r\n      role: new FormControl('', {validators: [Validators.required]\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n  * When Signup button is clicked, this method is called. If the form is invalid then return. If form is valid then\r\n   * values for the email, password and role will be pushed to the Auth Service, passing it through the CreateUser.\r\n   */\r\n  onSignup() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.authService.createUser(this.form.value.email, this.form.value.password, this.form.value.role);\r\n  }\r\n\r\n  /**\r\n   * When user navigates away from the signup.html it will unsubscribe the subscription so we don't get a memory leak.\r\n   */\r\n  ngOnDestroy() {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n}\r\n"],"sourceRoot":""}